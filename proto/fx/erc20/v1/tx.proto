syntax = "proto3";
package fx.erc20.v1;

import "fx/erc20/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/functionx/fx-core/x/erc20/types";

// Msg defines the erc20 Msg service.
service Msg {
  // ConvertCoin mints a ERC20 representation of the SDK Coin denom that is
  // registered on the token mapping.
  rpc ConvertCoin(MsgConvertCoin) returns (MsgConvertCoinResponse);
  // ConvertERC20 mints a Cosmos coin representation of the ERC20 token contract
  // that is registered on the token mapping.
  rpc ConvertERC20(MsgConvertERC20) returns (MsgConvertERC20Response);
  // ConvertDenom convert denom to other denom
  rpc ConvertDenom(MsgConvertDenom) returns (MsgConvertDenomResponse);

  // UpdateParams defines a governance operation for updating the x/erc20 module
  // parameters. The authority is hard-coded to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgConvertCoin defines a Msg to convert a Cosmos Coin to a ERC20 token
message MsgConvertCoin {
  // Cosmos coin which denomination is registered on erc20 bridge.
  // The coin amount defines the total ERC20 tokens to convert.
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  // recipient hex address to receive ERC20 token
  string receiver = 2;
  // cosmos bech32 address from the owner of the given ERC20 tokens
  string sender = 3;
}

// MsgConvertCoinResponse returns no fields
message MsgConvertCoinResponse {}

// MsgConvertERC20 defines a Msg to convert an ERC20 token to a Cosmos SDK coin.
message MsgConvertERC20 {
  // ERC20 token contract address registered on erc20 bridge
  string contract_address = 1;
  // amount of ERC20 tokens to mint
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // bech32 address to receive SDK coins.
  string receiver = 3;
  // sender hex address from the owner of the given ERC20 tokens
  string sender = 4;
}

// MsgConvertERC20Response returns no fields
message MsgConvertERC20Response {}

// MsgConvertDenom defines a Msg to convert an denom to other denom
message MsgConvertDenom {
  // msg sender
  string sender = 1;
  // receiver address
  string receiver = 2;
  // coin to convert
  cosmos.base.v1beta1.Coin coin = 3 [ (gogoproto.nullable) = false ];
  // target denom
  string target = 4;
}

// MsgConvertDenomResponse returns no fields
message MsgConvertDenomResponse {}


// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/erc20 parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
