// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FxBridgeLogicETHBridgeToken is an auto generated low-level Go binding around an user-defined struct.
type FxBridgeLogicETHBridgeToken struct {
	Addr     common.Address
	Name     string
	Symbol   string
	Decimals uint8
}

// FxBridgeLogicETHMetaData contains all meta data concerning the FxBridgeLogicETH contract.
var FxBridgeLogicETHMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"}],\"name\":\"AddBridgeTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"FxOriginatedTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"OracleSetUpdatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToFxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"activeBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isOriginated\",\"type\":\"bool\"}],\"name\":\"addBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"checkAssetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_theHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"}],\"name\":\"checkOracleSignatures\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"structFxBridgeLogicETH.BridgeToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_oracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"}],\"name\":\"makeCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"pauseBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToFx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"setFxOriginatedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_fxBridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_fxOriginatedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_nonceArray\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceive\",\"type\":\"address\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOriginated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateOracleSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506137d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806371cbf3811161010f578063bb83bf96116100a2578063f1099f6111610071578063f1099f611461043c578063f2fde38b1461044f578063f92367fd14610462578063fd9791bb1461046b576101e5565b8063bb83bf96146103f7578063dde65aea14610400578063df97174b14610413578063e5a2b5d214610433576101e5565b80638fd3ab80116100de5780638fd3ab80146103b6578063a36a4ab0146103be578063a4f37efd146103d1578063aa63a894146103e4576101e5565b806371cbf3811461038157806373b20547146103945780638456cb591461039d5780638da5cb5b146103a5576101e5565b80633f4ba83a116101875780636189d107116101565780636189d1071461033257806370a0eb941461034557806370e5a8981461034e578063715018a614610379576101e5565b80633f4ba83a146102d8578063474d561c146102e057806354fd4d50146103125780635c975abb14610327576101e5565b8063285a190a116101c3578063285a190a1461027a57806331678cf61461028f578063332caa1f146102b25780633a08e299146102c5576101e5565b8063011b2174146101ea5780630acac94214610210578063283040b414610265575b600080fd5b6101fd6101f8366004612c44565b61047e565b6040519081526020015b60405180910390f35b61024661021e366004612c44565b60d16020526000908152604090205460ff808216916101008104821691620100009091041683565b6040805193151584529115156020840152151590820152606001610207565b61026d61049d565b6040516102079190613331565b61028d610288366004612eb1565b610756565b005b6102a261029d366004612c5e565b61090d565b6040519015158152602001610207565b61028d6102c0366004612d07565b6109bf565b61028d6102d3366004612f8f565b610fc6565b61028d6111c3565b6102a26102ee366004612c44565b6001600160a01b0316600090815260d1602052604090205462010000900460ff1690565b61031a6111dd565b6040516102079190613498565b60975460ff166102a2565b61028d610340366004612ccf565b61126b565b6101fd60cd5481565b61036161035c366004613243565b6114a3565b6040516001600160a01b039091168152602001610207565b61028d6114cd565b6101fd61038f3660046130b5565b6114df565b6101fd60cc5481565b61028d61152c565b6065546001600160a01b0316610361565b61028d611544565b6102a26103cc366004612c44565b611700565b6102a26103df366004612c44565b611816565b61028d6103f2366004613141565b611bf1565b6101fd60ce5481565b6102a261040e366004612c44565b611e83565b6101fd610421366004612c44565b60cf6020526000908152604090205481565b6101fd60ca5481565b6102a261044a366004612c90565b611f98565b61028d61045d366004612c44565b612238565b6101fd60c95481565b60cb54610361906001600160a01b031681565b6001600160a01b038116600090815260cf60205260409020545b919050565b60d0546060906000906001600160401b038111156104cb57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561053357816020015b610520604051806080016040528060006001600160a01b031681526020016060815260200160608152602001600060ff1681525090565b8152602001906001900390816104e95790505b50905060005b60d05481101561075057600060d0828154811061056657634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316905060006040518060800160405280836001600160a01b03168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156105db57600080fd5b505afa1580156105ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261061791908101906131b4565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561065557600080fd5b505afa158015610669573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261069191908101906131b4565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cf57600080fd5b505afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610707919061325b565b60ff1681525090508084848151811061073057634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061074890613739565b915050610539565b50905090565b6000805b88518110156108e35786818151811061078357634e487b7160e01b600052603260045260246000fd5b602002602001015160ff166000146108d15761083e8982815181106107b857634e487b7160e01b600052603260045260246000fd5b6020026020010151858984815181106107e157634e487b7160e01b600052603260045260246000fd5b602002602001015189858151811061080957634e487b7160e01b600052603260045260246000fd5b602002602001015189868151811061083157634e487b7160e01b600052603260045260246000fd5b60200260200101516122b1565b61088f5760405162461bcd60e51b815260206004820181905260248201527f4f7261636c65207369676e617475726520646f6573206e6f74206d617463682e60448201526064015b60405180910390fd5b8781815181106108af57634e487b7160e01b600052603260045260246000fd5b6020026020010151826108c291906136ba565b9150828211156108d1576108e3565b806108db81613739565b91505061075a565b508181116109035760405162461bcd60e51b81526004016108869061352d565b5050505050505050565b600061091761237b565b60405163f2fde38b60e01b81526001600160a01b03838116600483015284169063f2fde38b90602401600060405180830381600087803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b5050604080516001600160a01b038088168252861660208201527fb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699935001905060405180910390a150600192915050565b6109c76123d5565b6109cf61242f565b6001600160a01b038316600090815260d160209081526040918290208251606081018452905460ff8082161515835261010082048116151593830193909352620100009004909116151591810182905290610a685760405162461bcd60e51b8152602060048201526019602482015278556e737570706f7274656420746f6b656e206164647265737360381b6044820152606401610886565b8060200151610aac5760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881dd85cc81c185d5cd95960821b6044820152606401610886565b6020808601516001600160a01b038616600090815260cf90925260409091205410610b3f5760405162461bcd60e51b815260206004820152603760248201527f4e6577206261746368206e6f6e6365206d75737420626520677265617465722060448201527f7468616e207468652063757272656e74206e6f6e63652e0000000000000000006064820152608401610886565b824310610bb45760405162461bcd60e51b815260206004820152603c60248201527f42617463682074696d656f7574206d757374206265206772656174657220746860448201527f616e207468652063757272656e7420626c6f636b206865696768742e000000006064820152608401610886565b8b518d51148015610bc657508a518d51145b8015610bd3575089518d51145b8015610be0575088518d51145b610c2c5760405162461bcd60e51b815260206004820152601d60248201527f4d616c666f726d65642063757272656e74206f7261636c65207365742e0000006044820152606401610886565b60cd54610c448e8e886000602002015160c9546114df565b14610c615760405162461bcd60e51b81526004016108869061358a565b86518851148015610c73575085518851145b610cbf5760405162461bcd60e51b815260206004820181905260248201527f4d616c666f726d6564206261746368206f66207472616e73616374696f6e732e6044820152606401610886565b610d408d8d8d8d8d60c9546f0e8e4c2dce6c2c6e8d2dedc84c2e8c6d60831b8f8f8f8f600160028110610d0257634e487b7160e01b600052603260045260246000fd5b60200201518f8f8f604051602001610d229998979695949392919061341b565b6040516020818303038152906040528051906020012060ca54610756565b6020808601516001600160a01b038616600090815260cf9092526040822055805b8951811015610ecd57610da4888281518110610d8d57634e487b7160e01b600052603260045260246000fd5b60200260200101518361247590919063ffffffff16565b8351909250151560011415610e4f57856001600160a01b03166340c10f19308c8481518110610de357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610e1c9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b505050505b610ebb898281518110610e7257634e487b7160e01b600052603260045260246000fd5b60200260200101518b8381518110610e9a57634e487b7160e01b600052603260045260246000fd5b6020026020010151886001600160a01b03166124889092919063ffffffff16565b80610ec581613739565b915050610d61565b508151151560011415610f3b576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038616906340c10f1990604401600060405180830381600087803b158015610f2257600080fd5b505af1158015610f36573d6000803e3d6000fd5b505050505b610f4f6001600160a01b0386168483612488565b505060cc54610f5f906001612475565b60cc556001600160a01b03831684600160200201517f02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab70860cc54604051610fa791815260200190565b60405180910390a3610fb860018055565b505050505050505050505050565b610fce61242f565b8387116110435760405162461bcd60e51b815260206004820152603b60248201527f4e6577206f7261636c6520736574206e6f6e6365206d7573742062652067726560448201527f61746572207468616e207468652063757272656e74206e6f6e636500000000006064820152608401610886565b87518951146110945760405162461bcd60e51b815260206004820152601860248201527f4d616c666f726d6564206e6577206f7261636c652073657400000000000000006044820152606401610886565b845186511480156110a6575082518651145b80156110b3575081518651145b80156110c0575080518651145b61110c5760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610886565b60cd5461111d87878760c9546114df565b1461113a5760405162461bcd60e51b81526004016108869061358a565b600061114a8a8a8a60c9546114df565b905061115d87878686868660ca54610756565b60cd81905560ce88905560cc54611175906001612475565b60cc81905560405189917f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3916111af91908e908e90613632565b60405180910390a250505050505050505050565b6111cb61237b565b6111d36124f6565b6111db61253f565b565b60d280546111ea906136fe565b80601f0160208091040260200160405190810160405280929190818152602001828054611216906136fe565b80156112635780601f1061123857610100808354040283529160200191611263565b820191906000526020600020905b81548152906001019060200180831161124657829003601f168201915b505050505081565b6112736123d5565b61127b61242f565b600081116112d65760405162461bcd60e51b815260206004820152602260248201527f616d6f756e742073686f756c642062652067726561746572207468616e207a65604482015261726f60f01b6064820152608401610886565b6001600160a01b038416600090815260d160209081526040918290208251606081018452905460ff808216151583526101008204811615159383019390935262010000900490911615159181018290529061136f5760405162461bcd60e51b8152602060048201526019602482015278556e737570706f7274656420746f6b656e206164647265737360381b6044820152606401610886565b80602001516113b35760405162461bcd60e51b815260206004820152601060248201526f1d1bdad95b881dd85cc81c185d5cd95960821b6044820152606401610886565b6113c86001600160a01b038616333085612591565b805115156001141561142f57604051630852cd8d60e31b8152600481018390526001600160a01b038616906342966c6890602401600060405180830381600087803b15801561141657600080fd5b505af115801561142a573d6000803e3d6000fd5b505050505b60cc5461143d906001612475565b60cc819055604080518581526020810185905290810191909152849033906001600160a01b038816907f034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c9060600160405180910390a45061149d60018055565b50505050565b60d081815481106114b357600080fd5b6000918252602090912001546001600160a01b0316905081565b6114d561237b565b6111db60006125c9565b6040516000906918da1958dadc1bda5b9d60b21b9061150a908490839087908a908a906020016133d8565b604051602081830303815290604052805190602001209150505b949350505050565b61153461237b565b61153c61242f565b6111db61261b565b61154c61237b565b604080518082019091526005808252640312e312e360dc1b60209092019182526115789160d291612a0d565b5060005b60d05481101561164a5760405180606001604052806000151581526020016001151581526020016001151581525060d1600060d084815481106115cf57634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b0316835282810193909352604091820190208351815493850151949092015160ff199093169115159190911761ff001916610100931515939093029290921762ff0000191662010000911515919091021790558061164281613739565b91505061157c565b5060cb805460d0805460018181019092557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180546001600160a01b0319166001600160a01b039384161790556040805160608101825282815260208181018481528284019485529554909416600090815260d1909452922091518254935191511515620100000262ff0000199215156101000261ff001992151560ff1990961695909517919091169390931716919091179055565b600061170a61237b565b6001600160a01b038216600090815260d1602052604090205462010000900460ff16151560011461177d5760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610886565b6001600160a01b038216600090815260d1602052604090205460ff6101009091041615156001146117f05760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792070617573656400000000006044820152606401610886565b506001600160a01b0316600090815260d160205260409020805461ff0019169055600190565b600061182061237b565b60cb546001600160a01b03838116911614156118755760405162461bcd60e51b815260206004820152601460248201527324b73b30b634b210313934b233b2903a37b5b2b760611b6044820152606401610886565b60cb80546001600160a01b0319166001600160a01b03841617905560cc5461189e906001612475565b60cc81905550816001600160a01b03167ffbaa7af285fff024998c9265afef33fb4e87f832f053151022580ea67fde8417836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561190857600080fd5b505afa15801561191c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261194491908101906131b4565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561197d57600080fd5b505afa158015611991573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b991908101906131b4565b856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f257600080fd5b505afa158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a919061325b565b60cc54604051611a3d94939291906134ab565b60405180910390a2816001600160a01b03167f2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015611aa957600080fd5b505afa158015611abd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ae591908101906131b4565b846001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611b1e57600080fd5b505afa158015611b32573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b5a91908101906131b4565b856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9357600080fd5b505afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb919061325b565b60cc54604051611be194939291906000906134e7565b60405180910390a2506001919050565b600054610100900460ff1615808015611c115750600054600160ff909116105b80611c2b5750303b158015611c2b575060005460ff166001145b611c8e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610886565b6000805460ff191660011790558015611cb1576000805461ff0019166101001790555b611cb9612658565b611cc1612687565b611cc96126b6565b8151835114611d1a5760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610886565b6000805b8351811015611d7b57838181518110611d4757634e487b7160e01b600052603260045260246000fd5b602002602001015182611d5a91906136ba565b915085821115611d6957611d7b565b80611d7381613739565b915050611d1e565b50848111611d9b5760405162461bcd60e51b81526004016108869061352d565b6000611daa858560008a6114df565b60c988905560ca87905560cd819055600060ce55600160cc55604080518082019091526005808252640312e302e360dc1b6020909201918252919250611df39160d29190612a0d565b5060ce547f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b360cc548787604051611e2c93929190613632565b60405180910390a250508015611e7c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000611e8d61237b565b6001600160a01b038216600090815260d1602052604090205462010000900460ff161515600114611f005760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610886565b6001600160a01b038216600090815260d16020526040902054610100900460ff1615611f6e5760405162461bcd60e51b815260206004820152601c60248201527f42726964676520746f6b656e20616c72656164792061637469766564000000006044820152606401610886565b506001600160a01b0316600090815260d160205260409020805461ff001916610100179055600190565b6000611fa261237b565b6001600160a01b038416611ff05760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610886565b6001600160a01b038416600090815260d1602052604090205462010000900460ff161561205f5760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792065786973747300000000006044820152606401610886565b61208b8460405180606001604052808515158152602001600115158152602001600115158152506126e5565b836001600160a01b03167f2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156120ef57600080fd5b505afa158015612103573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261212b91908101906131b4565b866001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561216457600080fd5b505afa158015612178573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121a091908101906131b4565b876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d957600080fd5b505afa1580156121ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612211919061325b565b60cc54886040516122269594939291906134e7565b60405180910390a25060019392505050565b61224061237b565b6001600160a01b0381166122a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610886565b6122ae816125c9565b50565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018590526000908190605c0160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015612351573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161491505095945050505050565b6065546001600160a01b031633146111db5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610886565b600260015414156124285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610886565b6002600155565b60975460ff16156111db5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610886565b600061248182846136ba565b9392505050565b6040516001600160a01b0383166024820152604481018290526124eb90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612791565b505050565b60018055565b60975460ff166111db5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610886565b6125476124f6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b038085166024830152831660448201526064810182905261149d9085906323b872dd60e01b906084016124b4565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61262361242f565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125743390565b600054610100900460ff1661267f5760405162461bcd60e51b8152600401610886906135e7565b6111db612863565b600054610100900460ff166126ae5760405162461bcd60e51b8152600401610886906135e7565b6111db612896565b600054610100900460ff166126dd5760405162461bcd60e51b8152600401610886906135e7565b6111db6128c6565b60d0805460018082019092557fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180546001600160a01b0319166001600160a01b038516908117909155600090815260d1602090815260409182902084518154928601519386015160ff199093169015151761ff001916610100931515939093029290921762ff00001916620100009115159190910217905560cc5461278a91612475565b60cc555050565b60006127e6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128ed9092919063ffffffff16565b8051909150156124eb57808060200190518101906128049190613125565b6124eb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610886565b600054610100900460ff1661288a5760405162461bcd60e51b8152600401610886906135e7565b6097805460ff19169055565b600054610100900460ff166128bd5760405162461bcd60e51b8152600401610886906135e7565b6111db336125c9565b600054610100900460ff166124f05760405162461bcd60e51b8152600401610886906135e7565b6060611524848460008585600080866001600160a01b031685876040516129149190613315565b60006040518083038185875af1925050503d8060008114612951576040519150601f19603f3d011682016040523d82523d6000602084013e612956565b606091505b509150915061296787838387612972565b979650505050505050565b606083156129de5782516129d7576001600160a01b0385163b6129d75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610886565b5081611524565b61152483838151156129f35781518083602001fd5b8060405162461bcd60e51b81526004016108869190613498565b828054612a19906136fe565b90600052602060002090601f016020900481019282612a3b5760008555612a81565b82601f10612a5457805160ff1916838001178555612a81565b82800160010185558215612a81579182015b82811115612a81578251825591602001919060010190612a66565b50612a8d929150612a91565b5090565b5b80821115612a8d5760008155600101612a92565b80356001600160a01b038116811461049857600080fd5b600082601f830112612acd578081fd5b81356020612ae2612add83613697565b613667565b8281528181019085830183850287018401881015612afe578586fd5b855b85811015612b2357612b1182612aa6565b84529284019290840190600101612b00565b5090979650505050505050565b600082601f830112612b40578081fd5b81356020612b50612add83613697565b8281528181019085830183850287018401881015612b6c578586fd5b855b85811015612b2357813584529284019290840190600101612b6e565b600082601f830112612b9a578081fd5b612ba46040613667565b808385604086011115612bb5578384fd5b835b6002811015612bd6578135845260209384019390910190600101612bb7565b509095945050505050565b600082601f830112612bf1578081fd5b81356020612c01612add83613697565b8281528181019085830183850287018401881015612c1d578586fd5b855b85811015612b23578135612c328161378e565b84529284019290840190600101612c1f565b600060208284031215612c55578081fd5b61248182612aa6565b60008060408385031215612c70578081fd5b612c7983612aa6565b9150612c8760208401612aa6565b90509250929050565b600080600060608486031215612ca4578081fd5b612cad84612aa6565b9250602084013591506040840135612cc481613780565b809150509250925092565b60008060008060808587031215612ce4578081fd5b612ced85612aa6565b966020860135965060408601359560600135945092505050565b6000806000806000806000806000806000806101a08d8f031215612d2957898afd5b6001600160401b038d351115612d3d57898afd5b612d4a8e8e358f01612abd565b9b506001600160401b0360208e01351115612d6357898afd5b612d738e60208f01358f01612b30565b9a506001600160401b0360408e01351115612d8c57898afd5b612d9c8e60408f01358f01612be1565b99506001600160401b0360608e01351115612db5578788fd5b612dc58e60608f01358f01612b30565b98506001600160401b0360808e01351115612dde578788fd5b612dee8e60808f01358f01612b30565b97506001600160401b0360a08e01351115612e07578687fd5b612e178e60a08f01358f01612b30565b96506001600160401b0360c08e01351115612e30578586fd5b612e408e60c08f01358f01612abd565b95506001600160401b0360e08e01351115612e59578485fd5b612e698e60e08f01358f01612b30565b9450612e798e6101008f01612b8a565b9350612e886101408e01612aa6565b92506101608d01359150612e9f6101808e01612aa6565b90509295989b509295989b509295989b565b600080600080600080600060e0888a031215612ecb578081fd5b87356001600160401b0380821115612ee1578283fd5b612eed8b838c01612abd565b985060208a0135915080821115612f02578283fd5b612f0e8b838c01612b30565b975060408a0135915080821115612f23578283fd5b612f2f8b838c01612be1565b965060608a0135915080821115612f44578283fd5b612f508b838c01612b30565b955060808a0135915080821115612f65578283fd5b50612f728a828b01612b30565b93505060a0880135915060c0880135905092959891949750929550565b60008060008060008060008060006101208a8c031215612fad578283fd5b89356001600160401b0380821115612fc3578485fd5b612fcf8d838e01612abd565b9a5060208c0135915080821115612fe4578485fd5b612ff08d838e01612b30565b995060408c0135985060608c013591508082111561300c578485fd5b6130188d838e01612abd565b975060808c013591508082111561302d578485fd5b6130398d838e01612b30565b965060a08c0135955060c08c0135915080821115613055578485fd5b6130618d838e01612be1565b945060e08c0135915080821115613076578384fd5b6130828d838e01612b30565b93506101008c0135915080821115613098578283fd5b506130a58c828d01612b30565b9150509295985092959850929598565b600080600080608085870312156130ca578182fd5b84356001600160401b03808211156130e0578384fd5b6130ec88838901612abd565b95506020870135915080821115613101578384fd5b5061310e87828801612b30565b949794965050505060408301359260600135919050565b600060208284031215613136578081fd5b815161248181613780565b60008060008060808587031215613156578182fd5b843593506020850135925060408501356001600160401b038082111561317a578384fd5b61318688838901612abd565b9350606087013591508082111561319b578283fd5b506131a887828801612b30565b91505092959194509250565b6000602082840312156131c5578081fd5b81516001600160401b03808211156131db578283fd5b818401915084601f8301126131ee578283fd5b8151818111156132005761320061376a565b613213601f8201601f1916602001613667565b9150808252856020828501011115613229578384fd5b61323a8160208401602086016136d2565b50949350505050565b600060208284031215613254578081fd5b5035919050565b60006020828403121561326c578081fd5b81516124818161378e565b6000815180845260208085019450808401835b838110156132af5781516001600160a01b03168752958201959082019060010161328a565b509495945050505050565b6000815180845260208085019450808401835b838110156132af578151875295820195908201906001016132cd565b600081518084526133018160208601602086016136d2565b601f01601f19169290920160200192915050565b600082516133278184602087016136d2565b9190910192915050565b60208082528251828201819052600091906040908185019080840286018301878501865b838110156133ca57888303603f19018552815180516001600160a01b031684528781015160808986018190529061338e828701826132e9565b91505087820151858203898701526133a682826132e9565b60609384015160ff1696909301959095525094870194925090860190600101613355565b509098975050505050505050565b600086825285602083015284604083015260a060608301526133fd60a0830185613277565b828103608084015261340f81856132ba565b98975050505050505050565b60006101208b83528a602084015280604084015261343b8184018b6132ba565b9050828103606084015261344f818a613277565b9050828103608084015261346381896132ba565b60a084019790975250506001600160a01b0393841660c082015260e08101929092529091166101009091015295945050505050565b60006020825261248160208301846132e9565b6000608082526134be60808301876132e9565b82810360208401526134d081876132e9565b60ff95909516604084015250506060015292915050565b600060a082526134fa60a08301886132e9565b828103602084015261350c81886132e9565b60ff9690961660408401525050606081019290925260809091015292915050565b60208082526039908201527f5375626d6974746564206f7261636c6520736574207369676e6174757265732060408201527f646f206e6f74206861766520656e6f75676820706f7765722e00000000000000606082015260800190565b6020808252603c908201527f537570706c6965642063757272656e74206f7261636c657320616e6420706f7760408201527f65727320646f206e6f74206d6174636820636865636b706f696e742e00000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008482526060602083015261364b6060830185613277565b828103604084015261365d81856132ba565b9695505050505050565b604051601f8201601f191681016001600160401b038111828210171561368f5761368f61376a565b604052919050565b60006001600160401b038211156136b0576136b061376a565b5060209081020190565b600082198211156136cd576136cd613754565b500190565b60005b838110156136ed5781810151838201526020016136d5565b8381111561149d5750506000910152565b60028104600182168061371257607f821691505b6020821081141561373357634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561374d5761374d613754565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146122ae57600080fd5b60ff811681146122ae57600080fdfea2646970667358221220d5a5f5389753c29c08b77eb6068860cdc8bb2fa485639991662f5b156195509564736f6c63430008020033",
}

// FxBridgeLogicETHABI is the input ABI used to generate the binding from.
// Deprecated: Use FxBridgeLogicETHMetaData.ABI instead.
var FxBridgeLogicETHABI = FxBridgeLogicETHMetaData.ABI

// FxBridgeLogicETHBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FxBridgeLogicETHMetaData.Bin instead.
var FxBridgeLogicETHBin = FxBridgeLogicETHMetaData.Bin

// DeployFxBridgeLogicETH deploys a new Ethereum contract, binding an instance of FxBridgeLogicETH to it.
func DeployFxBridgeLogicETH(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FxBridgeLogicETH, error) {
	parsed, err := FxBridgeLogicETHMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FxBridgeLogicETHBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FxBridgeLogicETH{FxBridgeLogicETHCaller: FxBridgeLogicETHCaller{contract: contract}, FxBridgeLogicETHTransactor: FxBridgeLogicETHTransactor{contract: contract}, FxBridgeLogicETHFilterer: FxBridgeLogicETHFilterer{contract: contract}}, nil
}

// FxBridgeLogicETH is an auto generated Go binding around an Ethereum contract.
type FxBridgeLogicETH struct {
	FxBridgeLogicETHCaller     // Read-only binding to the contract
	FxBridgeLogicETHTransactor // Write-only binding to the contract
	FxBridgeLogicETHFilterer   // Log filterer for contract events
}

// FxBridgeLogicETHCaller is an auto generated read-only Go binding around an Ethereum contract.
type FxBridgeLogicETHCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicETHTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FxBridgeLogicETHTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicETHFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FxBridgeLogicETHFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicETHSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FxBridgeLogicETHSession struct {
	Contract     *FxBridgeLogicETH // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FxBridgeLogicETHCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FxBridgeLogicETHCallerSession struct {
	Contract *FxBridgeLogicETHCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// FxBridgeLogicETHTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FxBridgeLogicETHTransactorSession struct {
	Contract     *FxBridgeLogicETHTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// FxBridgeLogicETHRaw is an auto generated low-level Go binding around an Ethereum contract.
type FxBridgeLogicETHRaw struct {
	Contract *FxBridgeLogicETH // Generic contract binding to access the raw methods on
}

// FxBridgeLogicETHCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FxBridgeLogicETHCallerRaw struct {
	Contract *FxBridgeLogicETHCaller // Generic read-only contract binding to access the raw methods on
}

// FxBridgeLogicETHTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FxBridgeLogicETHTransactorRaw struct {
	Contract *FxBridgeLogicETHTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFxBridgeLogicETH creates a new instance of FxBridgeLogicETH, bound to a specific deployed contract.
func NewFxBridgeLogicETH(address common.Address, backend bind.ContractBackend) (*FxBridgeLogicETH, error) {
	contract, err := bindFxBridgeLogicETH(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETH{FxBridgeLogicETHCaller: FxBridgeLogicETHCaller{contract: contract}, FxBridgeLogicETHTransactor: FxBridgeLogicETHTransactor{contract: contract}, FxBridgeLogicETHFilterer: FxBridgeLogicETHFilterer{contract: contract}}, nil
}

// NewFxBridgeLogicETHCaller creates a new read-only instance of FxBridgeLogicETH, bound to a specific deployed contract.
func NewFxBridgeLogicETHCaller(address common.Address, caller bind.ContractCaller) (*FxBridgeLogicETHCaller, error) {
	contract, err := bindFxBridgeLogicETH(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHCaller{contract: contract}, nil
}

// NewFxBridgeLogicETHTransactor creates a new write-only instance of FxBridgeLogicETH, bound to a specific deployed contract.
func NewFxBridgeLogicETHTransactor(address common.Address, transactor bind.ContractTransactor) (*FxBridgeLogicETHTransactor, error) {
	contract, err := bindFxBridgeLogicETH(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHTransactor{contract: contract}, nil
}

// NewFxBridgeLogicETHFilterer creates a new log filterer instance of FxBridgeLogicETH, bound to a specific deployed contract.
func NewFxBridgeLogicETHFilterer(address common.Address, filterer bind.ContractFilterer) (*FxBridgeLogicETHFilterer, error) {
	contract, err := bindFxBridgeLogicETH(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHFilterer{contract: contract}, nil
}

// bindFxBridgeLogicETH binds a generic wrapper to an already deployed contract.
func bindFxBridgeLogicETH(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FxBridgeLogicETHMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogicETH *FxBridgeLogicETHRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogicETH.Contract.FxBridgeLogicETHCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogicETH *FxBridgeLogicETHRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.FxBridgeLogicETHTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogicETH *FxBridgeLogicETHRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.FxBridgeLogicETHTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogicETH.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.contract.Transact(opts, method, params...)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) BridgeTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "bridgeTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogicETH.Contract.BridgeTokens(&_FxBridgeLogicETH.CallOpts, arg0)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogicETH.Contract.BridgeTokens(&_FxBridgeLogicETH.CallOpts, arg0)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) CheckAssetStatus(opts *bind.CallOpts, _tokenAddr common.Address) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "checkAssetStatus", _tokenAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogicETH.Contract.CheckAssetStatus(&_FxBridgeLogicETH.CallOpts, _tokenAddr)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogicETH.Contract.CheckAssetStatus(&_FxBridgeLogicETH.CallOpts, _tokenAddr)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) CheckOracleSignatures(opts *bind.CallOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "checkOracleSignatures", _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)

	if err != nil {
		return err
	}

	return err

}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogicETH.Contract.CheckOracleSignatures(&_FxBridgeLogicETH.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogicETH.Contract.CheckOracleSignatures(&_FxBridgeLogicETH.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) GetBridgeTokenList(opts *bind.CallOpts) ([]FxBridgeLogicETHBridgeToken, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "getBridgeTokenList")

	if err != nil {
		return *new([]FxBridgeLogicETHBridgeToken), err
	}

	out0 := *abi.ConvertType(out[0], new([]FxBridgeLogicETHBridgeToken)).(*[]FxBridgeLogicETHBridgeToken)

	return out0, err

}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) GetBridgeTokenList() ([]FxBridgeLogicETHBridgeToken, error) {
	return _FxBridgeLogicETH.Contract.GetBridgeTokenList(&_FxBridgeLogicETH.CallOpts)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) GetBridgeTokenList() ([]FxBridgeLogicETHBridgeToken, error) {
	return _FxBridgeLogicETH.Contract.GetBridgeTokenList(&_FxBridgeLogicETH.CallOpts)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) LastBatchNonce(opts *bind.CallOpts, _erc20Address common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "lastBatchNonce", _erc20Address)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.LastBatchNonce(&_FxBridgeLogicETH.CallOpts, _erc20Address)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.LastBatchNonce(&_FxBridgeLogicETH.CallOpts, _erc20Address)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) MakeCheckpoint(opts *bind.CallOpts, _oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "makeCheckpoint", _oracles, _powers, _oracleSetNonce, _fxBridgeId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogicETH.Contract.MakeCheckpoint(&_FxBridgeLogicETH.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogicETH.Contract.MakeCheckpoint(&_FxBridgeLogicETH.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) Owner() (common.Address, error) {
	return _FxBridgeLogicETH.Contract.Owner(&_FxBridgeLogicETH.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) Owner() (common.Address, error) {
	return _FxBridgeLogicETH.Contract.Owner(&_FxBridgeLogicETH.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) Paused() (bool, error) {
	return _FxBridgeLogicETH.Contract.Paused(&_FxBridgeLogicETH.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) Paused() (bool, error) {
	return _FxBridgeLogicETH.Contract.Paused(&_FxBridgeLogicETH.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) StateFxBridgeId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "state_fxBridgeId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogicETH.Contract.StateFxBridgeId(&_FxBridgeLogicETH.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogicETH.Contract.StateFxBridgeId(&_FxBridgeLogicETH.CallOpts)
}

// StateFxOriginatedToken is a free data retrieval call binding the contract method 0xfd9791bb.
//
// Solidity: function state_fxOriginatedToken() view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) StateFxOriginatedToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "state_fxOriginatedToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StateFxOriginatedToken is a free data retrieval call binding the contract method 0xfd9791bb.
//
// Solidity: function state_fxOriginatedToken() view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) StateFxOriginatedToken() (common.Address, error) {
	return _FxBridgeLogicETH.Contract.StateFxOriginatedToken(&_FxBridgeLogicETH.CallOpts)
}

// StateFxOriginatedToken is a free data retrieval call binding the contract method 0xfd9791bb.
//
// Solidity: function state_fxOriginatedToken() view returns(address)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) StateFxOriginatedToken() (common.Address, error) {
	return _FxBridgeLogicETH.Contract.StateFxOriginatedToken(&_FxBridgeLogicETH.CallOpts)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) StateLastBatchNonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "state_lastBatchNonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StateLastBatchNonces(&_FxBridgeLogicETH.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StateLastBatchNonces(&_FxBridgeLogicETH.CallOpts, arg0)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) StateLastEventNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "state_lastEventNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StateLastEventNonce(&_FxBridgeLogicETH.CallOpts)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StateLastEventNonce(&_FxBridgeLogicETH.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) StateLastOracleSetCheckpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "state_lastOracleSetCheckpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogicETH.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogicETH.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogicETH.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogicETH.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) StateLastOracleSetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "state_lastOracleSetNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StateLastOracleSetNonce(&_FxBridgeLogicETH.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StateLastOracleSetNonce(&_FxBridgeLogicETH.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) StatePowerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "state_powerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StatePowerThreshold(&_FxBridgeLogicETH.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogicETH.Contract.StatePowerThreshold(&_FxBridgeLogicETH.CallOpts)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) TokenStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "tokenStatus", arg0)

	outstruct := new(struct {
		IsOriginated bool
		IsActive     bool
		IsExist      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsOriginated = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.IsActive = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.IsExist = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogicETH.Contract.TokenStatus(&_FxBridgeLogicETH.CallOpts, arg0)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogicETH.Contract.TokenStatus(&_FxBridgeLogicETH.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogicETH *FxBridgeLogicETHCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FxBridgeLogicETH.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) Version() (string, error) {
	return _FxBridgeLogicETH.Contract.Version(&_FxBridgeLogicETH.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogicETH *FxBridgeLogicETHCallerSession) Version() (string, error) {
	return _FxBridgeLogicETH.Contract.Version(&_FxBridgeLogicETH.CallOpts)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) ActiveBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "activeBridgeToken", _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.ActiveBridgeToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.ActiveBridgeToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) AddBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "addBridgeToken", _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.AddBridgeToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.AddBridgeToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) Init(opts *bind.TransactOpts, _fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "init", _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Init(&_FxBridgeLogicETH.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Init(&_FxBridgeLogicETH.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) Migrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "migrate")
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) Migrate() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Migrate(&_FxBridgeLogicETH.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) Migrate() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Migrate(&_FxBridgeLogicETH.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Pause(&_FxBridgeLogicETH.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Pause(&_FxBridgeLogicETH.TransactOpts)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) PauseBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "pauseBridgeToken", _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.PauseBridgeToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.PauseBridgeToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.RenounceOwnership(&_FxBridgeLogicETH.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.RenounceOwnership(&_FxBridgeLogicETH.TransactOpts)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) SendToFx(opts *bind.TransactOpts, _tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "sendToFx", _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.SendToFx(&_FxBridgeLogicETH.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.SendToFx(&_FxBridgeLogicETH.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SetFxOriginatedToken is a paid mutator transaction binding the contract method 0xa4f37efd.
//
// Solidity: function setFxOriginatedToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) SetFxOriginatedToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "setFxOriginatedToken", _tokenAddr)
}

// SetFxOriginatedToken is a paid mutator transaction binding the contract method 0xa4f37efd.
//
// Solidity: function setFxOriginatedToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) SetFxOriginatedToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.SetFxOriginatedToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr)
}

// SetFxOriginatedToken is a paid mutator transaction binding the contract method 0xa4f37efd.
//
// Solidity: function setFxOriginatedToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) SetFxOriginatedToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.SetFxOriginatedToken(&_FxBridgeLogicETH.TransactOpts, _tokenAddr)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) SubmitBatch(opts *bind.TransactOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "submitBatch", _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.SubmitBatch(&_FxBridgeLogicETH.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.SubmitBatch(&_FxBridgeLogicETH.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) TransferOwner(opts *bind.TransactOpts, _token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "transferOwner", _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.TransferOwner(&_FxBridgeLogicETH.TransactOpts, _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.TransferOwner(&_FxBridgeLogicETH.TransactOpts, _token, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.TransferOwnership(&_FxBridgeLogicETH.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.TransferOwnership(&_FxBridgeLogicETH.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Unpause(&_FxBridgeLogicETH.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.Unpause(&_FxBridgeLogicETH.TransactOpts)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactor) UpdateOracleSet(opts *bind.TransactOpts, _newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogicETH.contract.Transact(opts, "updateOracleSet", _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.UpdateOracleSet(&_FxBridgeLogicETH.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogicETH *FxBridgeLogicETHTransactorSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogicETH.Contract.UpdateOracleSet(&_FxBridgeLogicETH.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// FxBridgeLogicETHAddBridgeTokenEventIterator is returned from FilterAddBridgeTokenEvent and is used to iterate over the raw logs and unpacked data for AddBridgeTokenEvent events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHAddBridgeTokenEventIterator struct {
	Event *FxBridgeLogicETHAddBridgeTokenEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHAddBridgeTokenEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHAddBridgeTokenEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHAddBridgeTokenEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHAddBridgeTokenEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHAddBridgeTokenEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHAddBridgeTokenEvent represents a AddBridgeTokenEvent event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHAddBridgeTokenEvent struct {
	TokenContract common.Address
	Name          string
	Symbol        string
	Decimals      uint8
	EventNonce    *big.Int
	ChannelIBC    [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAddBridgeTokenEvent is a free log retrieval operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterAddBridgeTokenEvent(opts *bind.FilterOpts, _tokenContract []common.Address) (*FxBridgeLogicETHAddBridgeTokenEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHAddBridgeTokenEventIterator{contract: _FxBridgeLogicETH.contract, event: "AddBridgeTokenEvent", logs: logs, sub: sub}, nil
}

// WatchAddBridgeTokenEvent is a free log subscription operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchAddBridgeTokenEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHAddBridgeTokenEvent, _tokenContract []common.Address) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHAddBridgeTokenEvent)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddBridgeTokenEvent is a log parse operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseAddBridgeTokenEvent(log types.Log) (*FxBridgeLogicETHAddBridgeTokenEvent, error) {
	event := new(FxBridgeLogicETHAddBridgeTokenEvent)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHFxOriginatedTokenEventIterator is returned from FilterFxOriginatedTokenEvent and is used to iterate over the raw logs and unpacked data for FxOriginatedTokenEvent events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHFxOriginatedTokenEventIterator struct {
	Event *FxBridgeLogicETHFxOriginatedTokenEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHFxOriginatedTokenEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHFxOriginatedTokenEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHFxOriginatedTokenEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHFxOriginatedTokenEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHFxOriginatedTokenEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHFxOriginatedTokenEvent represents a FxOriginatedTokenEvent event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHFxOriginatedTokenEvent struct {
	TokenContract common.Address
	Name          string
	Symbol        string
	Decimals      uint8
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFxOriginatedTokenEvent is a free log retrieval operation binding the contract event 0xfbaa7af285fff024998c9265afef33fb4e87f832f053151022580ea67fde8417.
//
// Solidity: event FxOriginatedTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterFxOriginatedTokenEvent(opts *bind.FilterOpts, _tokenContract []common.Address) (*FxBridgeLogicETHFxOriginatedTokenEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "FxOriginatedTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHFxOriginatedTokenEventIterator{contract: _FxBridgeLogicETH.contract, event: "FxOriginatedTokenEvent", logs: logs, sub: sub}, nil
}

// WatchFxOriginatedTokenEvent is a free log subscription operation binding the contract event 0xfbaa7af285fff024998c9265afef33fb4e87f832f053151022580ea67fde8417.
//
// Solidity: event FxOriginatedTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchFxOriginatedTokenEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHFxOriginatedTokenEvent, _tokenContract []common.Address) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "FxOriginatedTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHFxOriginatedTokenEvent)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "FxOriginatedTokenEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFxOriginatedTokenEvent is a log parse operation binding the contract event 0xfbaa7af285fff024998c9265afef33fb4e87f832f053151022580ea67fde8417.
//
// Solidity: event FxOriginatedTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseFxOriginatedTokenEvent(log types.Log) (*FxBridgeLogicETHFxOriginatedTokenEvent, error) {
	event := new(FxBridgeLogicETHFxOriginatedTokenEvent)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "FxOriginatedTokenEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHInitializedIterator struct {
	Event *FxBridgeLogicETHInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHInitialized represents a Initialized event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterInitialized(opts *bind.FilterOpts) (*FxBridgeLogicETHInitializedIterator, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHInitializedIterator{contract: _FxBridgeLogicETH.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHInitialized) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHInitialized)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseInitialized(log types.Log) (*FxBridgeLogicETHInitialized, error) {
	event := new(FxBridgeLogicETHInitialized)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHOracleSetUpdatedEventIterator is returned from FilterOracleSetUpdatedEvent and is used to iterate over the raw logs and unpacked data for OracleSetUpdatedEvent events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHOracleSetUpdatedEventIterator struct {
	Event *FxBridgeLogicETHOracleSetUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHOracleSetUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHOracleSetUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHOracleSetUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHOracleSetUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHOracleSetUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHOracleSetUpdatedEvent represents a OracleSetUpdatedEvent event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHOracleSetUpdatedEvent struct {
	NewOracleSetNonce *big.Int
	EventNonce        *big.Int
	Oracles           []common.Address
	Powers            []*big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOracleSetUpdatedEvent is a free log retrieval operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterOracleSetUpdatedEvent(opts *bind.FilterOpts, _newOracleSetNonce []*big.Int) (*FxBridgeLogicETHOracleSetUpdatedEventIterator, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHOracleSetUpdatedEventIterator{contract: _FxBridgeLogicETH.contract, event: "OracleSetUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchOracleSetUpdatedEvent is a free log subscription operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchOracleSetUpdatedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHOracleSetUpdatedEvent, _newOracleSetNonce []*big.Int) (event.Subscription, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHOracleSetUpdatedEvent)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleSetUpdatedEvent is a log parse operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseOracleSetUpdatedEvent(log types.Log) (*FxBridgeLogicETHOracleSetUpdatedEvent, error) {
	event := new(FxBridgeLogicETHOracleSetUpdatedEvent)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHOwnershipTransferredIterator struct {
	Event *FxBridgeLogicETHOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHOwnershipTransferred represents a OwnershipTransferred event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FxBridgeLogicETHOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHOwnershipTransferredIterator{contract: _FxBridgeLogicETH.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHOwnershipTransferred)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseOwnershipTransferred(log types.Log) (*FxBridgeLogicETHOwnershipTransferred, error) {
	event := new(FxBridgeLogicETHOwnershipTransferred)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHPausedIterator struct {
	Event *FxBridgeLogicETHPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHPaused represents a Paused event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterPaused(opts *bind.FilterOpts) (*FxBridgeLogicETHPausedIterator, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHPausedIterator{contract: _FxBridgeLogicETH.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHPaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHPaused)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParsePaused(log types.Log) (*FxBridgeLogicETHPaused, error) {
	event := new(FxBridgeLogicETHPaused)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHSendToFxEventIterator is returned from FilterSendToFxEvent and is used to iterate over the raw logs and unpacked data for SendToFxEvent events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHSendToFxEventIterator struct {
	Event *FxBridgeLogicETHSendToFxEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHSendToFxEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHSendToFxEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHSendToFxEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHSendToFxEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHSendToFxEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHSendToFxEvent represents a SendToFxEvent event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHSendToFxEvent struct {
	TokenContract common.Address
	Sender        common.Address
	Destination   [32]byte
	TargetIBC     [32]byte
	Amount        *big.Int
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendToFxEvent is a free log retrieval operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterSendToFxEvent(opts *bind.FilterOpts, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (*FxBridgeLogicETHSendToFxEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHSendToFxEventIterator{contract: _FxBridgeLogicETH.contract, event: "SendToFxEvent", logs: logs, sub: sub}, nil
}

// WatchSendToFxEvent is a free log subscription operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchSendToFxEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHSendToFxEvent, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHSendToFxEvent)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendToFxEvent is a log parse operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseSendToFxEvent(log types.Log) (*FxBridgeLogicETHSendToFxEvent, error) {
	event := new(FxBridgeLogicETHSendToFxEvent)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHTransactionBatchExecutedEventIterator is returned from FilterTransactionBatchExecutedEvent and is used to iterate over the raw logs and unpacked data for TransactionBatchExecutedEvent events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHTransactionBatchExecutedEventIterator struct {
	Event *FxBridgeLogicETHTransactionBatchExecutedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHTransactionBatchExecutedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHTransactionBatchExecutedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHTransactionBatchExecutedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHTransactionBatchExecutedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHTransactionBatchExecutedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHTransactionBatchExecutedEvent represents a TransactionBatchExecutedEvent event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHTransactionBatchExecutedEvent struct {
	BatchNonce *big.Int
	Token      common.Address
	EventNonce *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionBatchExecutedEvent is a free log retrieval operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterTransactionBatchExecutedEvent(opts *bind.FilterOpts, _batchNonce []*big.Int, _token []common.Address) (*FxBridgeLogicETHTransactionBatchExecutedEventIterator, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHTransactionBatchExecutedEventIterator{contract: _FxBridgeLogicETH.contract, event: "TransactionBatchExecutedEvent", logs: logs, sub: sub}, nil
}

// WatchTransactionBatchExecutedEvent is a free log subscription operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchTransactionBatchExecutedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHTransactionBatchExecutedEvent, _batchNonce []*big.Int, _token []common.Address) (event.Subscription, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHTransactionBatchExecutedEvent)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionBatchExecutedEvent is a log parse operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseTransactionBatchExecutedEvent(log types.Log) (*FxBridgeLogicETHTransactionBatchExecutedEvent, error) {
	event := new(FxBridgeLogicETHTransactionBatchExecutedEvent)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHTransferOwnerEventIterator is returned from FilterTransferOwnerEvent and is used to iterate over the raw logs and unpacked data for TransferOwnerEvent events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHTransferOwnerEventIterator struct {
	Event *FxBridgeLogicETHTransferOwnerEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHTransferOwnerEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHTransferOwnerEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHTransferOwnerEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHTransferOwnerEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHTransferOwnerEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHTransferOwnerEvent represents a TransferOwnerEvent event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHTransferOwnerEvent struct {
	Token    common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferOwnerEvent is a free log retrieval operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterTransferOwnerEvent(opts *bind.FilterOpts) (*FxBridgeLogicETHTransferOwnerEventIterator, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHTransferOwnerEventIterator{contract: _FxBridgeLogicETH.contract, event: "TransferOwnerEvent", logs: logs, sub: sub}, nil
}

// WatchTransferOwnerEvent is a free log subscription operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchTransferOwnerEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHTransferOwnerEvent) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHTransferOwnerEvent)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferOwnerEvent is a log parse operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseTransferOwnerEvent(log types.Log) (*FxBridgeLogicETHTransferOwnerEvent, error) {
	event := new(FxBridgeLogicETHTransferOwnerEvent)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicETHUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHUnpausedIterator struct {
	Event *FxBridgeLogicETHUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicETHUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicETHUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicETHUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicETHUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicETHUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicETHUnpaused represents a Unpaused event raised by the FxBridgeLogicETH contract.
type FxBridgeLogicETHUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) FilterUnpaused(opts *bind.FilterOpts) (*FxBridgeLogicETHUnpausedIterator, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicETHUnpausedIterator{contract: _FxBridgeLogicETH.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicETHUnpaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicETH.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicETHUnpaused)
				if err := _FxBridgeLogicETH.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogicETH *FxBridgeLogicETHFilterer) ParseUnpaused(log types.Log) (*FxBridgeLogicETHUnpaused, error) {
	event := new(FxBridgeLogicETHUnpaused)
	if err := _FxBridgeLogicETH.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
