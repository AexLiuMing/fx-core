// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FxBridgeLogicBridgeToken is an auto generated low-level Go binding around an user-defined struct.
type FxBridgeLogicBridgeToken struct {
	Addr     common.Address
	Name     string
	Symbol   string
	Decimals uint8
}

// FxBridgeLogicMetaData contains all meta data concerning the FxBridgeLogic contract.
var FxBridgeLogicMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"}],\"name\":\"AddBridgeTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"OracleSetUpdatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToFxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"activeBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isOriginated\",\"type\":\"bool\"}],\"name\":\"addBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"checkAssetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_theHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"}],\"name\":\"checkOracleSignatures\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"structFxBridgeLogic.BridgeToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_oracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"}],\"name\":\"makeCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"pauseBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToFx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_fxBridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_nonceArray\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceive\",\"type\":\"address\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOriginated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateOracleSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506131b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063bb83bf9611610097578063e5a2b5d211610071578063e5a2b5d2146103f7578063f1099f6114610400578063f2fde38b14610413578063f92367fd14610426576101c4565b8063bb83bf96146103bb578063dde65aea146103c4578063df97174b146103d7576101c4565b80638456cb59116100d35780638456cb591461037c5780638da5cb5b14610384578063a36a4ab014610395578063aa63a894146103a8576101c4565b8063715018a61461035857806371cbf3811461036057806373b2054714610373576101c4565b80633f4ba83a116101665780635c975abb116101405780635c975abb146103065780636189d1071461031157806370a0eb941461032457806370e5a8981461032d576101c4565b80633f4ba83a146102b7578063474d561c146102bf57806354fd4d50146102f1576101c4565b8063285a190a116101a2578063285a190a1461025957806331678cf61461026e578063332caa1f146102915780633a08e299146102a4576101c4565b8063011b2174146101c95780630acac942146101ef578063283040b414610244575b600080fd5b6101dc6101d736600461265e565b61042f565b6040519081526020015b60405180910390f35b6102256101fd36600461265e565b60d06020526000908152604090205460ff808216916101008104821691620100009091041683565b60408051931515845291151560208401521515908201526060016101e6565b61024c61044e565b6040516101e69190612d4b565b61026c6102673660046128cb565b610707565b005b61028161027c366004612678565b6108be565b60405190151581526020016101e6565b61026c61029f366004612721565b610970565b61026c6102b23660046129a9565b610f77565b61026c611174565b6102816102cd36600461265e565b6001600160a01b0316600090815260d0602052604090205462010000900460ff1690565b6102f961118e565b6040516101e69190612eb2565b60975460ff16610281565b61026c61031f3660046126e9565b61121c565b6101dc60cc5481565b61034061033b366004612c5d565b611454565b6040516001600160a01b0390911681526020016101e6565b61026c61147e565b6101dc61036e366004612acf565b611490565b6101dc60cb5481565b61026c6114dd565b6065546001600160a01b0316610340565b6102816103a336600461265e565b6114f5565b61026c6103b6366004612b5b565b61160b565b6101dc60cd5481565b6102816103d236600461265e565b61189d565b6101dc6103e536600461265e565b60ce6020526000908152604090205481565b6101dc60ca5481565b61028161040e3660046126aa565b6119b2565b61026c61042136600461265e565b611c52565b6101dc60c95481565b6001600160a01b038116600090815260ce60205260409020545b919050565b60cf546060906000906001600160401b0381111561047c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104e457816020015b6104d1604051806080016040528060006001600160a01b031681526020016060815260200160608152602001600060ff1681525090565b81526020019060019003908161049a5790505b50905060005b60cf5481101561070157600060cf828154811061051757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316905060006040518060800160405280836001600160a01b03168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561058c57600080fd5b505afa1580156105a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105c89190810190612bce565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561060657600080fd5b505afa15801561061a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106429190810190612bce565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561068057600080fd5b505afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190612c75565b60ff168152509050808484815181106106e157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806106f990613117565b9150506104ea565b50905090565b6000805b88518110156108945786818151811061073457634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16600014610882576107ef89828151811061076957634e487b7160e01b600052603260045260246000fd5b60200260200101518589848151811061079257634e487b7160e01b600052603260045260246000fd5b60200260200101518985815181106107ba57634e487b7160e01b600052603260045260246000fd5b60200260200101518986815181106107e257634e487b7160e01b600052603260045260246000fd5b6020026020010151611ccb565b6108405760405162461bcd60e51b815260206004820181905260248201527f4f7261636c65207369676e617475726520646f6573206e6f74206d617463682e60448201526064015b60405180910390fd5b87818151811061086057634e487b7160e01b600052603260045260246000fd5b6020026020010151826108739190613098565b91508282111561088257610894565b8061088c81613117565b91505061070b565b508181116108b45760405162461bcd60e51b815260040161083790612f0b565b5050505050505050565b60006108c8611d95565b60405163f2fde38b60e01b81526001600160a01b03838116600483015284169063f2fde38b90602401600060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b5050604080516001600160a01b038088168252861660208201527fb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699935001905060405180910390a150600192915050565b610978611def565b610980611e49565b6001600160a01b038316600090815260d060209081526040918290208251606081018452905460ff8082161515835261010082048116151593830193909352620100009004909116151591810182905290610a195760405162461bcd60e51b8152602060048201526019602482015278556e737570706f7274656420746f6b656e206164647265737360381b6044820152606401610837565b8060200151610a5d5760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881dd85cc81c185d5cd95960821b6044820152606401610837565b6020808601516001600160a01b038616600090815260ce90925260409091205410610af05760405162461bcd60e51b815260206004820152603760248201527f4e6577206261746368206e6f6e6365206d75737420626520677265617465722060448201527f7468616e207468652063757272656e74206e6f6e63652e0000000000000000006064820152608401610837565b824310610b655760405162461bcd60e51b815260206004820152603c60248201527f42617463682074696d656f7574206d757374206265206772656174657220746860448201527f616e207468652063757272656e7420626c6f636b206865696768742e000000006064820152608401610837565b8b518d51148015610b7757508a518d51145b8015610b84575089518d51145b8015610b91575088518d51145b610bdd5760405162461bcd60e51b815260206004820152601d60248201527f4d616c666f726d65642063757272656e74206f7261636c65207365742e0000006044820152606401610837565b60cc54610bf58e8e886000602002015160c954611490565b14610c125760405162461bcd60e51b815260040161083790612f68565b86518851148015610c24575085518851145b610c705760405162461bcd60e51b815260206004820181905260248201527f4d616c666f726d6564206261746368206f66207472616e73616374696f6e732e6044820152606401610837565b610cf18d8d8d8d8d60c9546f0e8e4c2dce6c2c6e8d2dedc84c2e8c6d60831b8f8f8f8f600160028110610cb357634e487b7160e01b600052603260045260246000fd5b60200201518f8f8f604051602001610cd399989796959493929190612e35565b6040516020818303038152906040528051906020012060ca54610707565b6020808601516001600160a01b038616600090815260ce9092526040822055805b8951811015610e7e57610d55888281518110610d3e57634e487b7160e01b600052603260045260246000fd5b602002602001015183611e8f90919063ffffffff16565b8351909250151560011415610e0057856001600160a01b03166340c10f19308c8481518110610d9457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610dcd9291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610de757600080fd5b505af1158015610dfb573d6000803e3d6000fd5b505050505b610e6c898281518110610e2357634e487b7160e01b600052603260045260246000fd5b60200260200101518b8381518110610e4b57634e487b7160e01b600052603260045260246000fd5b6020026020010151886001600160a01b0316611ea29092919063ffffffff16565b80610e7681613117565b915050610d12565b508151151560011415610eec576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038616906340c10f1990604401600060405180830381600087803b158015610ed357600080fd5b505af1158015610ee7573d6000803e3d6000fd5b505050505b610f006001600160a01b0386168483611ea2565b505060cb54610f10906001611e8f565b60cb556001600160a01b03831684600160200201517f02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab70860cb54604051610f5891815260200190565b60405180910390a3610f6960018055565b505050505050505050505050565b610f7f611e49565b838711610ff45760405162461bcd60e51b815260206004820152603b60248201527f4e6577206f7261636c6520736574206e6f6e6365206d7573742062652067726560448201527f61746572207468616e207468652063757272656e74206e6f6e636500000000006064820152608401610837565b87518951146110455760405162461bcd60e51b815260206004820152601860248201527f4d616c666f726d6564206e6577206f7261636c652073657400000000000000006044820152606401610837565b84518651148015611057575082518651145b8015611064575081518651145b8015611071575080518651145b6110bd5760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610837565b60cc546110ce87878760c954611490565b146110eb5760405162461bcd60e51b815260040161083790612f68565b60006110fb8a8a8a60c954611490565b905061110e87878686868660ca54610707565b60cc81905560cd88905560cb54611126906001611e8f565b60cb81905560405189917f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b39161116091908e908e90613010565b60405180910390a250505050505050505050565b61117c611d95565b611184611f10565b61118c611f59565b565b60d1805461119b906130dc565b80601f01602080910402602001604051908101604052809291908181526020018280546111c7906130dc565b80156112145780601f106111e957610100808354040283529160200191611214565b820191906000526020600020905b8154815290600101906020018083116111f757829003601f168201915b505050505081565b611224611def565b61122c611e49565b600081116112875760405162461bcd60e51b815260206004820152602260248201527f616d6f756e742073686f756c642062652067726561746572207468616e207a65604482015261726f60f01b6064820152608401610837565b6001600160a01b038416600090815260d060209081526040918290208251606081018452905460ff80821615158352610100820481161515938301939093526201000090049091161515918101829052906113205760405162461bcd60e51b8152602060048201526019602482015278556e737570706f7274656420746f6b656e206164647265737360381b6044820152606401610837565b80602001516113645760405162461bcd60e51b815260206004820152601060248201526f1d1bdad95b881dd85cc81c185d5cd95960821b6044820152606401610837565b6113796001600160a01b038616333085611fab565b80511515600114156113e057604051630852cd8d60e31b8152600481018390526001600160a01b038616906342966c6890602401600060405180830381600087803b1580156113c757600080fd5b505af11580156113db573d6000803e3d6000fd5b505050505b60cb546113ee906001611e8f565b60cb819055604080518581526020810185905290810191909152849033906001600160a01b038816907f034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c9060600160405180910390a45061144e60018055565b50505050565b60cf818154811061146457600080fd5b6000918252602090912001546001600160a01b0316905081565b611486611d95565b61118c6000611fe3565b6040516000906918da1958dadc1bda5b9d60b21b906114bb908490839087908a908a90602001612df2565b604051602081830303815290604052805190602001209150505b949350505050565b6114e5611d95565b6114ed611e49565b61118c612035565b60006114ff611d95565b6001600160a01b038216600090815260d0602052604090205462010000900460ff1615156001146115725760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610837565b6001600160a01b038216600090815260d0602052604090205460ff6101009091041615156001146115e55760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792070617573656400000000006044820152606401610837565b506001600160a01b0316600090815260d060205260409020805461ff0019169055600190565b600054610100900460ff161580801561162b5750600054600160ff909116105b806116455750303b158015611645575060005460ff166001145b6116a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610837565b6000805460ff1916600117905580156116cb576000805461ff0019166101001790555b6116d3612072565b6116db6120a1565b6116e36120d0565b81518351146117345760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610837565b6000805b83518110156117955783818151811061176157634e487b7160e01b600052603260045260246000fd5b6020026020010151826117749190613098565b91508582111561178357611795565b8061178d81613117565b915050611738565b508481116117b55760405162461bcd60e51b815260040161083790612f0b565b60006117c4858560008a611490565b60c988905560ca87905560cc819055600060cd55600160cb55604080518082019091526005808252640312e302e360dc1b602090920191825291925061180d9160d19190612427565b5060cd547f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b360cb54878760405161184693929190613010565b60405180910390a250508015611896576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b60006118a7611d95565b6001600160a01b038216600090815260d0602052604090205462010000900460ff16151560011461191a5760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610837565b6001600160a01b038216600090815260d06020526040902054610100900460ff16156119885760405162461bcd60e51b815260206004820152601c60248201527f42726964676520746f6b656e20616c72656164792061637469766564000000006044820152606401610837565b506001600160a01b0316600090815260d060205260409020805461ff001916610100179055600190565b60006119bc611d95565b6001600160a01b038416611a0a5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610837565b6001600160a01b038416600090815260d0602052604090205462010000900460ff1615611a795760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792065786973747300000000006044820152606401610837565b611aa58460405180606001604052808515158152602001600115158152602001600115158152506120ff565b836001600160a01b03167f2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f856001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015611b0957600080fd5b505afa158015611b1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b459190810190612bce565b866001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611b7e57600080fd5b505afa158015611b92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bba9190810190612bce565b876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf357600080fd5b505afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b9190612c75565b60cb5488604051611c40959493929190612ec5565b60405180910390a25060019392505050565b611c5a611d95565b6001600160a01b038116611cbf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610837565b611cc881611fe3565b50565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018590526000908190605c0160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015611d6b573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161491505095945050505050565b6065546001600160a01b0316331461118c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610837565b60026001541415611e425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610837565b6002600155565b60975460ff161561118c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610837565b6000611e9b8284613098565b9392505050565b6040516001600160a01b038316602482015260448101829052611f0590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526121ab565b505050565b60018055565b60975460ff1661118c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610837565b611f61611f10565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b038085166024830152831660448201526064810182905261144e9085906323b872dd60e01b90608401611ece565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61203d611e49565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f8e3390565b600054610100900460ff166120995760405162461bcd60e51b815260040161083790612fc5565b61118c61227d565b600054610100900460ff166120c85760405162461bcd60e51b815260040161083790612fc5565b61118c6122b0565b600054610100900460ff166120f75760405162461bcd60e51b815260040161083790612fc5565b61118c6122e0565b60cf805460018082019092557facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290180546001600160a01b0319166001600160a01b038516908117909155600090815260d0602090815260409182902084518154928601519386015160ff199093169015151761ff001916610100931515939093029290921762ff00001916620100009115159190910217905560cb546121a491611e8f565b60cb555050565b6000612200826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123079092919063ffffffff16565b805190915015611f05578080602001905181019061221e9190612b3f565b611f055760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610837565b600054610100900460ff166122a45760405162461bcd60e51b815260040161083790612fc5565b6097805460ff19169055565b600054610100900460ff166122d75760405162461bcd60e51b815260040161083790612fc5565b61118c33611fe3565b600054610100900460ff16611f0a5760405162461bcd60e51b815260040161083790612fc5565b60606114d5848460008585600080866001600160a01b0316858760405161232e9190612d2f565b60006040518083038185875af1925050503d806000811461236b576040519150601f19603f3d011682016040523d82523d6000602084013e612370565b606091505b50915091506123818783838761238c565b979650505050505050565b606083156123f85782516123f1576001600160a01b0385163b6123f15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610837565b50816114d5565b6114d5838381511561240d5781518083602001fd5b8060405162461bcd60e51b81526004016108379190612eb2565b828054612433906130dc565b90600052602060002090601f016020900481019282612455576000855561249b565b82601f1061246e57805160ff191683800117855561249b565b8280016001018555821561249b579182015b8281111561249b578251825591602001919060010190612480565b506124a79291506124ab565b5090565b5b808211156124a757600081556001016124ac565b80356001600160a01b038116811461044957600080fd5b600082601f8301126124e7578081fd5b813560206124fc6124f783613075565b613045565b8281528181019085830183850287018401881015612518578586fd5b855b8581101561253d5761252b826124c0565b8452928401929084019060010161251a565b5090979650505050505050565b600082601f83011261255a578081fd5b8135602061256a6124f783613075565b8281528181019085830183850287018401881015612586578586fd5b855b8581101561253d57813584529284019290840190600101612588565b600082601f8301126125b4578081fd5b6125be6040613045565b8083856040860111156125cf578384fd5b835b60028110156125f05781358452602093840193909101906001016125d1565b509095945050505050565b600082601f83011261260b578081fd5b8135602061261b6124f783613075565b8281528181019085830183850287018401881015612637578586fd5b855b8581101561253d57813561264c8161316c565b84529284019290840190600101612639565b60006020828403121561266f578081fd5b611e9b826124c0565b6000806040838503121561268a578081fd5b612693836124c0565b91506126a1602084016124c0565b90509250929050565b6000806000606084860312156126be578081fd5b6126c7846124c0565b92506020840135915060408401356126de8161315e565b809150509250925092565b600080600080608085870312156126fe578081fd5b612707856124c0565b966020860135965060408601359560600135945092505050565b6000806000806000806000806000806000806101a08d8f03121561274357898afd5b6001600160401b038d35111561275757898afd5b6127648e8e358f016124d7565b9b506001600160401b0360208e0135111561277d57898afd5b61278d8e60208f01358f0161254a565b9a506001600160401b0360408e013511156127a657898afd5b6127b68e60408f01358f016125fb565b99506001600160401b0360608e013511156127cf578788fd5b6127df8e60608f01358f0161254a565b98506001600160401b0360808e013511156127f8578788fd5b6128088e60808f01358f0161254a565b97506001600160401b0360a08e01351115612821578687fd5b6128318e60a08f01358f0161254a565b96506001600160401b0360c08e0135111561284a578586fd5b61285a8e60c08f01358f016124d7565b95506001600160401b0360e08e01351115612873578485fd5b6128838e60e08f01358f0161254a565b94506128938e6101008f016125a4565b93506128a26101408e016124c0565b92506101608d013591506128b96101808e016124c0565b90509295989b509295989b509295989b565b600080600080600080600060e0888a0312156128e5578081fd5b87356001600160401b03808211156128fb578283fd5b6129078b838c016124d7565b985060208a013591508082111561291c578283fd5b6129288b838c0161254a565b975060408a013591508082111561293d578283fd5b6129498b838c016125fb565b965060608a013591508082111561295e578283fd5b61296a8b838c0161254a565b955060808a013591508082111561297f578283fd5b5061298c8a828b0161254a565b93505060a0880135915060c0880135905092959891949750929550565b60008060008060008060008060006101208a8c0312156129c7578283fd5b89356001600160401b03808211156129dd578485fd5b6129e98d838e016124d7565b9a5060208c01359150808211156129fe578485fd5b612a0a8d838e0161254a565b995060408c0135985060608c0135915080821115612a26578485fd5b612a328d838e016124d7565b975060808c0135915080821115612a47578485fd5b612a538d838e0161254a565b965060a08c0135955060c08c0135915080821115612a6f578485fd5b612a7b8d838e016125fb565b945060e08c0135915080821115612a90578384fd5b612a9c8d838e0161254a565b93506101008c0135915080821115612ab2578283fd5b50612abf8c828d0161254a565b9150509295985092959850929598565b60008060008060808587031215612ae4578182fd5b84356001600160401b0380821115612afa578384fd5b612b06888389016124d7565b95506020870135915080821115612b1b578384fd5b50612b288782880161254a565b949794965050505060408301359260600135919050565b600060208284031215612b50578081fd5b8151611e9b8161315e565b60008060008060808587031215612b70578182fd5b843593506020850135925060408501356001600160401b0380821115612b94578384fd5b612ba0888389016124d7565b93506060870135915080821115612bb5578283fd5b50612bc28782880161254a565b91505092959194509250565b600060208284031215612bdf578081fd5b81516001600160401b0380821115612bf5578283fd5b818401915084601f830112612c08578283fd5b815181811115612c1a57612c1a613148565b612c2d601f8201601f1916602001613045565b9150808252856020828501011115612c43578384fd5b612c548160208401602086016130b0565b50949350505050565b600060208284031215612c6e578081fd5b5035919050565b600060208284031215612c86578081fd5b8151611e9b8161316c565b6000815180845260208085019450808401835b83811015612cc95781516001600160a01b031687529582019590820190600101612ca4565b509495945050505050565b6000815180845260208085019450808401835b83811015612cc957815187529582019590820190600101612ce7565b60008151808452612d1b8160208601602086016130b0565b601f01601f19169290920160200192915050565b60008251612d418184602087016130b0565b9190910192915050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015612de457888303603f19018552815180516001600160a01b0316845287810151608089860181905290612da882870182612d03565b9150508782015185820389870152612dc08282612d03565b60609384015160ff1696909301959095525094870194925090860190600101612d6f565b509098975050505050505050565b600086825285602083015284604083015260a06060830152612e1760a0830185612c91565b8281036080840152612e298185612cd4565b98975050505050505050565b60006101208b83528a6020840152806040840152612e558184018b612cd4565b90508281036060840152612e69818a612c91565b90508281036080840152612e7d8189612cd4565b60a084019790975250506001600160a01b0393841660c082015260e08101929092529091166101009091015295945050505050565b600060208252611e9b6020830184612d03565b600060a08252612ed860a0830188612d03565b8281036020840152612eea8188612d03565b60ff9690961660408401525050606081019290925260809091015292915050565b60208082526039908201527f5375626d6974746564206f7261636c6520736574207369676e6174757265732060408201527f646f206e6f74206861766520656e6f75676820706f7765722e00000000000000606082015260800190565b6020808252603c908201527f537570706c6965642063757272656e74206f7261636c657320616e6420706f7760408201527f65727320646f206e6f74206d6174636820636865636b706f696e742e00000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000848252606060208301526130296060830185612c91565b828103604084015261303b8185612cd4565b9695505050505050565b604051601f8201601f191681016001600160401b038111828210171561306d5761306d613148565b604052919050565b60006001600160401b0382111561308e5761308e613148565b5060209081020190565b600082198211156130ab576130ab613132565b500190565b60005b838110156130cb5781810151838201526020016130b3565b8381111561144e5750506000910152565b6002810460018216806130f057607f821691505b6020821081141561311157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561312b5761312b613132565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611cc857600080fd5b60ff81168114611cc857600080fdfea264697066735822122027fe8b6f8f9eb5ac90494399a3717ca737b111834f8ab5c408958c0e549ef96464736f6c63430008020033",
}

// FxBridgeLogicABI is the input ABI used to generate the binding from.
// Deprecated: Use FxBridgeLogicMetaData.ABI instead.
var FxBridgeLogicABI = FxBridgeLogicMetaData.ABI

// FxBridgeLogicBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FxBridgeLogicMetaData.Bin instead.
var FxBridgeLogicBin = FxBridgeLogicMetaData.Bin

// DeployFxBridgeLogic deploys a new Ethereum contract, binding an instance of FxBridgeLogic to it.
func DeployFxBridgeLogic(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FxBridgeLogic, error) {
	parsed, err := FxBridgeLogicMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FxBridgeLogicBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FxBridgeLogic{FxBridgeLogicCaller: FxBridgeLogicCaller{contract: contract}, FxBridgeLogicTransactor: FxBridgeLogicTransactor{contract: contract}, FxBridgeLogicFilterer: FxBridgeLogicFilterer{contract: contract}}, nil
}

// FxBridgeLogic is an auto generated Go binding around an Ethereum contract.
type FxBridgeLogic struct {
	FxBridgeLogicCaller     // Read-only binding to the contract
	FxBridgeLogicTransactor // Write-only binding to the contract
	FxBridgeLogicFilterer   // Log filterer for contract events
}

// FxBridgeLogicCaller is an auto generated read-only Go binding around an Ethereum contract.
type FxBridgeLogicCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FxBridgeLogicTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FxBridgeLogicFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FxBridgeLogicSession struct {
	Contract     *FxBridgeLogic    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FxBridgeLogicCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FxBridgeLogicCallerSession struct {
	Contract *FxBridgeLogicCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// FxBridgeLogicTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FxBridgeLogicTransactorSession struct {
	Contract     *FxBridgeLogicTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// FxBridgeLogicRaw is an auto generated low-level Go binding around an Ethereum contract.
type FxBridgeLogicRaw struct {
	Contract *FxBridgeLogic // Generic contract binding to access the raw methods on
}

// FxBridgeLogicCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FxBridgeLogicCallerRaw struct {
	Contract *FxBridgeLogicCaller // Generic read-only contract binding to access the raw methods on
}

// FxBridgeLogicTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FxBridgeLogicTransactorRaw struct {
	Contract *FxBridgeLogicTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFxBridgeLogic creates a new instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogic(address common.Address, backend bind.ContractBackend) (*FxBridgeLogic, error) {
	contract, err := bindFxBridgeLogic(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogic{FxBridgeLogicCaller: FxBridgeLogicCaller{contract: contract}, FxBridgeLogicTransactor: FxBridgeLogicTransactor{contract: contract}, FxBridgeLogicFilterer: FxBridgeLogicFilterer{contract: contract}}, nil
}

// NewFxBridgeLogicCaller creates a new read-only instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogicCaller(address common.Address, caller bind.ContractCaller) (*FxBridgeLogicCaller, error) {
	contract, err := bindFxBridgeLogic(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicCaller{contract: contract}, nil
}

// NewFxBridgeLogicTransactor creates a new write-only instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogicTransactor(address common.Address, transactor bind.ContractTransactor) (*FxBridgeLogicTransactor, error) {
	contract, err := bindFxBridgeLogic(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicTransactor{contract: contract}, nil
}

// NewFxBridgeLogicFilterer creates a new log filterer instance of FxBridgeLogic, bound to a specific deployed contract.
func NewFxBridgeLogicFilterer(address common.Address, filterer bind.ContractFilterer) (*FxBridgeLogicFilterer, error) {
	contract, err := bindFxBridgeLogic(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicFilterer{contract: contract}, nil
}

// bindFxBridgeLogic binds a generic wrapper to an already deployed contract.
func bindFxBridgeLogic(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FxBridgeLogicMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogic *FxBridgeLogicRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogic.Contract.FxBridgeLogicCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogic *FxBridgeLogicRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.FxBridgeLogicTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogic *FxBridgeLogicRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.FxBridgeLogicTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogic *FxBridgeLogicCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogic.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogic *FxBridgeLogicTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogic *FxBridgeLogicTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.contract.Transact(opts, method, params...)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCaller) BridgeTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "bridgeTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogic *FxBridgeLogicSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogic.Contract.BridgeTokens(&_FxBridgeLogic.CallOpts, arg0)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogic.Contract.BridgeTokens(&_FxBridgeLogic.CallOpts, arg0)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCaller) CheckAssetStatus(opts *bind.CallOpts, _tokenAddr common.Address) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "checkAssetStatus", _tokenAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogic.Contract.CheckAssetStatus(&_FxBridgeLogic.CallOpts, _tokenAddr)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogic.Contract.CheckAssetStatus(&_FxBridgeLogic.CallOpts, _tokenAddr)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogic *FxBridgeLogicCaller) CheckOracleSignatures(opts *bind.CallOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "checkOracleSignatures", _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)

	if err != nil {
		return err
	}

	return err

}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogic *FxBridgeLogicSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogic.Contract.CheckOracleSignatures(&_FxBridgeLogic.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogic *FxBridgeLogicCallerSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogic.Contract.CheckOracleSignatures(&_FxBridgeLogic.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogic *FxBridgeLogicCaller) GetBridgeTokenList(opts *bind.CallOpts) ([]FxBridgeLogicBridgeToken, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "getBridgeTokenList")

	if err != nil {
		return *new([]FxBridgeLogicBridgeToken), err
	}

	out0 := *abi.ConvertType(out[0], new([]FxBridgeLogicBridgeToken)).(*[]FxBridgeLogicBridgeToken)

	return out0, err

}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogic *FxBridgeLogicSession) GetBridgeTokenList() ([]FxBridgeLogicBridgeToken, error) {
	return _FxBridgeLogic.Contract.GetBridgeTokenList(&_FxBridgeLogic.CallOpts)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogic *FxBridgeLogicCallerSession) GetBridgeTokenList() ([]FxBridgeLogicBridgeToken, error) {
	return _FxBridgeLogic.Contract.GetBridgeTokenList(&_FxBridgeLogic.CallOpts)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) LastBatchNonce(opts *bind.CallOpts, _erc20Address common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "lastBatchNonce", _erc20Address)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.LastBatchNonce(&_FxBridgeLogic.CallOpts, _erc20Address)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.LastBatchNonce(&_FxBridgeLogic.CallOpts, _erc20Address)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCaller) MakeCheckpoint(opts *bind.CallOpts, _oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "makeCheckpoint", _oracles, _powers, _oracleSetNonce, _fxBridgeId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogic.Contract.MakeCheckpoint(&_FxBridgeLogic.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogic.Contract.MakeCheckpoint(&_FxBridgeLogic.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogic *FxBridgeLogicSession) Owner() (common.Address, error) {
	return _FxBridgeLogic.Contract.Owner(&_FxBridgeLogic.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) Owner() (common.Address, error) {
	return _FxBridgeLogic.Contract.Owner(&_FxBridgeLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) Paused() (bool, error) {
	return _FxBridgeLogic.Contract.Paused(&_FxBridgeLogic.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) Paused() (bool, error) {
	return _FxBridgeLogic.Contract.Paused(&_FxBridgeLogic.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateFxBridgeId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_fxBridgeId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateFxBridgeId(&_FxBridgeLogic.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateFxBridgeId(&_FxBridgeLogic.CallOpts)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastBatchNonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastBatchNonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastBatchNonces(&_FxBridgeLogic.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastBatchNonces(&_FxBridgeLogic.CallOpts, arg0)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastEventNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastEventNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastEventNonce(&_FxBridgeLogic.CallOpts)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastEventNonce(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastOracleSetCheckpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastOracleSetCheckpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StateLastOracleSetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_lastOracleSetNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetNonce(&_FxBridgeLogic.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StateLastOracleSetNonce(&_FxBridgeLogic.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCaller) StatePowerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "state_powerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StatePowerThreshold(&_FxBridgeLogic.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogic.Contract.StatePowerThreshold(&_FxBridgeLogic.CallOpts)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogic *FxBridgeLogicCaller) TokenStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "tokenStatus", arg0)

	outstruct := new(struct {
		IsOriginated bool
		IsActive     bool
		IsExist      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsOriginated = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.IsActive = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.IsExist = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogic *FxBridgeLogicSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogic.Contract.TokenStatus(&_FxBridgeLogic.CallOpts, arg0)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogic.Contract.TokenStatus(&_FxBridgeLogic.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogic *FxBridgeLogicCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FxBridgeLogic.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogic *FxBridgeLogicSession) Version() (string, error) {
	return _FxBridgeLogic.Contract.Version(&_FxBridgeLogic.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogic *FxBridgeLogicCallerSession) Version() (string, error) {
	return _FxBridgeLogic.Contract.Version(&_FxBridgeLogic.CallOpts)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) ActiveBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "activeBridgeToken", _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.ActiveBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.ActiveBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) AddBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "addBridgeToken", _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.AddBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.AddBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) Init(opts *bind.TransactOpts, _fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "init", _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Init(&_FxBridgeLogic.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Init(&_FxBridgeLogic.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogic *FxBridgeLogicSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Pause(&_FxBridgeLogic.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Pause(&_FxBridgeLogic.TransactOpts)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) PauseBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "pauseBridgeToken", _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.PauseBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.PauseBridgeToken(&_FxBridgeLogic.TransactOpts, _tokenAddr)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogic *FxBridgeLogicSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.RenounceOwnership(&_FxBridgeLogic.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.RenounceOwnership(&_FxBridgeLogic.TransactOpts)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) SendToFx(opts *bind.TransactOpts, _tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "sendToFx", _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SendToFx(&_FxBridgeLogic.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SendToFx(&_FxBridgeLogic.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) SubmitBatch(opts *bind.TransactOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "submitBatch", _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SubmitBatch(&_FxBridgeLogic.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.SubmitBatch(&_FxBridgeLogic.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactor) TransferOwner(opts *bind.TransactOpts, _token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "transferOwner", _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwner(&_FxBridgeLogic.TransactOpts, _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwner(&_FxBridgeLogic.TransactOpts, _token, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwnership(&_FxBridgeLogic.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.TransferOwnership(&_FxBridgeLogic.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogic *FxBridgeLogicSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Unpause(&_FxBridgeLogic.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.Unpause(&_FxBridgeLogic.TransactOpts)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactor) UpdateOracleSet(opts *bind.TransactOpts, _newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogic.contract.Transact(opts, "updateOracleSet", _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogic *FxBridgeLogicSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.UpdateOracleSet(&_FxBridgeLogic.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogic *FxBridgeLogicTransactorSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogic.Contract.UpdateOracleSet(&_FxBridgeLogic.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// FxBridgeLogicAddBridgeTokenEventIterator is returned from FilterAddBridgeTokenEvent and is used to iterate over the raw logs and unpacked data for AddBridgeTokenEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicAddBridgeTokenEventIterator struct {
	Event *FxBridgeLogicAddBridgeTokenEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicAddBridgeTokenEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicAddBridgeTokenEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicAddBridgeTokenEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicAddBridgeTokenEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicAddBridgeTokenEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicAddBridgeTokenEvent represents a AddBridgeTokenEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicAddBridgeTokenEvent struct {
	TokenContract common.Address
	Name          string
	Symbol        string
	Decimals      uint8
	EventNonce    *big.Int
	ChannelIBC    [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAddBridgeTokenEvent is a free log retrieval operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterAddBridgeTokenEvent(opts *bind.FilterOpts, _tokenContract []common.Address) (*FxBridgeLogicAddBridgeTokenEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicAddBridgeTokenEventIterator{contract: _FxBridgeLogic.contract, event: "AddBridgeTokenEvent", logs: logs, sub: sub}, nil
}

// WatchAddBridgeTokenEvent is a free log subscription operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchAddBridgeTokenEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicAddBridgeTokenEvent, _tokenContract []common.Address) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicAddBridgeTokenEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddBridgeTokenEvent is a log parse operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseAddBridgeTokenEvent(log types.Log) (*FxBridgeLogicAddBridgeTokenEvent, error) {
	event := new(FxBridgeLogicAddBridgeTokenEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FxBridgeLogic contract.
type FxBridgeLogicInitializedIterator struct {
	Event *FxBridgeLogicInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicInitialized represents a Initialized event raised by the FxBridgeLogic contract.
type FxBridgeLogicInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterInitialized(opts *bind.FilterOpts) (*FxBridgeLogicInitializedIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicInitializedIterator{contract: _FxBridgeLogic.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicInitialized) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicInitialized)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseInitialized(log types.Log) (*FxBridgeLogicInitialized, error) {
	event := new(FxBridgeLogicInitialized)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicOracleSetUpdatedEventIterator is returned from FilterOracleSetUpdatedEvent and is used to iterate over the raw logs and unpacked data for OracleSetUpdatedEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicOracleSetUpdatedEventIterator struct {
	Event *FxBridgeLogicOracleSetUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicOracleSetUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicOracleSetUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicOracleSetUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicOracleSetUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicOracleSetUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicOracleSetUpdatedEvent represents a OracleSetUpdatedEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicOracleSetUpdatedEvent struct {
	NewOracleSetNonce *big.Int
	EventNonce        *big.Int
	Oracles           []common.Address
	Powers            []*big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOracleSetUpdatedEvent is a free log retrieval operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterOracleSetUpdatedEvent(opts *bind.FilterOpts, _newOracleSetNonce []*big.Int) (*FxBridgeLogicOracleSetUpdatedEventIterator, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicOracleSetUpdatedEventIterator{contract: _FxBridgeLogic.contract, event: "OracleSetUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchOracleSetUpdatedEvent is a free log subscription operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchOracleSetUpdatedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicOracleSetUpdatedEvent, _newOracleSetNonce []*big.Int) (event.Subscription, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicOracleSetUpdatedEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleSetUpdatedEvent is a log parse operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseOracleSetUpdatedEvent(log types.Log) (*FxBridgeLogicOracleSetUpdatedEvent, error) {
	event := new(FxBridgeLogicOracleSetUpdatedEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FxBridgeLogic contract.
type FxBridgeLogicOwnershipTransferredIterator struct {
	Event *FxBridgeLogicOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicOwnershipTransferred represents a OwnershipTransferred event raised by the FxBridgeLogic contract.
type FxBridgeLogicOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FxBridgeLogicOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicOwnershipTransferredIterator{contract: _FxBridgeLogic.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicOwnershipTransferred)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseOwnershipTransferred(log types.Log) (*FxBridgeLogicOwnershipTransferred, error) {
	event := new(FxBridgeLogicOwnershipTransferred)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the FxBridgeLogic contract.
type FxBridgeLogicPausedIterator struct {
	Event *FxBridgeLogicPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicPaused represents a Paused event raised by the FxBridgeLogic contract.
type FxBridgeLogicPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterPaused(opts *bind.FilterOpts) (*FxBridgeLogicPausedIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicPausedIterator{contract: _FxBridgeLogic.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicPaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicPaused)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParsePaused(log types.Log) (*FxBridgeLogicPaused, error) {
	event := new(FxBridgeLogicPaused)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicSendToFxEventIterator is returned from FilterSendToFxEvent and is used to iterate over the raw logs and unpacked data for SendToFxEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicSendToFxEventIterator struct {
	Event *FxBridgeLogicSendToFxEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicSendToFxEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicSendToFxEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicSendToFxEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicSendToFxEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicSendToFxEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicSendToFxEvent represents a SendToFxEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicSendToFxEvent struct {
	TokenContract common.Address
	Sender        common.Address
	Destination   [32]byte
	TargetIBC     [32]byte
	Amount        *big.Int
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendToFxEvent is a free log retrieval operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterSendToFxEvent(opts *bind.FilterOpts, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (*FxBridgeLogicSendToFxEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicSendToFxEventIterator{contract: _FxBridgeLogic.contract, event: "SendToFxEvent", logs: logs, sub: sub}, nil
}

// WatchSendToFxEvent is a free log subscription operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchSendToFxEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicSendToFxEvent, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicSendToFxEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendToFxEvent is a log parse operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseSendToFxEvent(log types.Log) (*FxBridgeLogicSendToFxEvent, error) {
	event := new(FxBridgeLogicSendToFxEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicTransactionBatchExecutedEventIterator is returned from FilterTransactionBatchExecutedEvent and is used to iterate over the raw logs and unpacked data for TransactionBatchExecutedEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicTransactionBatchExecutedEventIterator struct {
	Event *FxBridgeLogicTransactionBatchExecutedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicTransactionBatchExecutedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicTransactionBatchExecutedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicTransactionBatchExecutedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicTransactionBatchExecutedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicTransactionBatchExecutedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicTransactionBatchExecutedEvent represents a TransactionBatchExecutedEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicTransactionBatchExecutedEvent struct {
	BatchNonce *big.Int
	Token      common.Address
	EventNonce *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionBatchExecutedEvent is a free log retrieval operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterTransactionBatchExecutedEvent(opts *bind.FilterOpts, _batchNonce []*big.Int, _token []common.Address) (*FxBridgeLogicTransactionBatchExecutedEventIterator, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicTransactionBatchExecutedEventIterator{contract: _FxBridgeLogic.contract, event: "TransactionBatchExecutedEvent", logs: logs, sub: sub}, nil
}

// WatchTransactionBatchExecutedEvent is a free log subscription operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchTransactionBatchExecutedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicTransactionBatchExecutedEvent, _batchNonce []*big.Int, _token []common.Address) (event.Subscription, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicTransactionBatchExecutedEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionBatchExecutedEvent is a log parse operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseTransactionBatchExecutedEvent(log types.Log) (*FxBridgeLogicTransactionBatchExecutedEvent, error) {
	event := new(FxBridgeLogicTransactionBatchExecutedEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicTransferOwnerEventIterator is returned from FilterTransferOwnerEvent and is used to iterate over the raw logs and unpacked data for TransferOwnerEvent events raised by the FxBridgeLogic contract.
type FxBridgeLogicTransferOwnerEventIterator struct {
	Event *FxBridgeLogicTransferOwnerEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicTransferOwnerEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicTransferOwnerEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicTransferOwnerEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicTransferOwnerEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicTransferOwnerEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicTransferOwnerEvent represents a TransferOwnerEvent event raised by the FxBridgeLogic contract.
type FxBridgeLogicTransferOwnerEvent struct {
	Token    common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferOwnerEvent is a free log retrieval operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterTransferOwnerEvent(opts *bind.FilterOpts) (*FxBridgeLogicTransferOwnerEventIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicTransferOwnerEventIterator{contract: _FxBridgeLogic.contract, event: "TransferOwnerEvent", logs: logs, sub: sub}, nil
}

// WatchTransferOwnerEvent is a free log subscription operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchTransferOwnerEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicTransferOwnerEvent) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicTransferOwnerEvent)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferOwnerEvent is a log parse operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseTransferOwnerEvent(log types.Log) (*FxBridgeLogicTransferOwnerEvent, error) {
	event := new(FxBridgeLogicTransferOwnerEvent)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the FxBridgeLogic contract.
type FxBridgeLogicUnpausedIterator struct {
	Event *FxBridgeLogicUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicUnpaused represents a Unpaused event raised by the FxBridgeLogic contract.
type FxBridgeLogicUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) FilterUnpaused(opts *bind.FilterOpts) (*FxBridgeLogicUnpausedIterator, error) {

	logs, sub, err := _FxBridgeLogic.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicUnpausedIterator{contract: _FxBridgeLogic.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicUnpaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogic.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicUnpaused)
				if err := _FxBridgeLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogic *FxBridgeLogicFilterer) ParseUnpaused(log types.Log) (*FxBridgeLogicUnpaused, error) {
	event := new(FxBridgeLogicUnpaused)
	if err := _FxBridgeLogic.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
