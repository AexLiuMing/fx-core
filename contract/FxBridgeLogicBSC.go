// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// FxBridgeLogicBSCBridgeToken is an auto generated low-level Go binding around an user-defined struct.
type FxBridgeLogicBSCBridgeToken struct {
	Addr     common.Address
	Name     string
	Symbol   string
	Decimals uint8
}

// FxBridgeLogicBSCMetaData contains all meta data concerning the FxBridgeLogicBSC contract.
var FxBridgeLogicBSCMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"}],\"name\":\"AddBridgeTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"OracleSetUpdatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"SendToFxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"activeBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_channelIBC\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isOriginated\",\"type\":\"bool\"}],\"name\":\"addBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bridgeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"checkAssetStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_theHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"}],\"name\":\"checkOracleSignatures\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"convert_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgeTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"structFxBridgeLogicBSC.BridgeToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_oracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_fxBridgeId\",\"type\":\"bytes32\"}],\"name\":\"makeCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"pauseBridgeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_targetIBC\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToFx\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_fxBridgeId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastOracleSetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_nonceArray\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceive\",\"type\":\"address\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOriginated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_newOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_currentOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_currentPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_currentOracleSetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateOracleSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_to\",\"type\":\"uint8\"}],\"name\":\"updateTokenDecimalsConvert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613790806100206000396000f3fe6080604052600436106101cd5760003560e01c8063715018a6116100f7578063aa63a89411610095578063e5a2b5d211610064578063e5a2b5d21461058d578063f1099f61146105a3578063f2fde38b146105c3578063f92367fd146105e3576101cd565b8063aa63a8941461050a578063bb83bf961461052a578063dde65aea14610540578063df97174b14610560576101cd565b80637d9a8ea6116100d15780637d9a8ea6146104755780638456cb59146104b75780638da5cb5b146104cc578063a36a4ab0146104ea576101cd565b8063715018a61461042a57806371cbf3811461043f57806373b205471461045f576101cd565b80633f4ba83a1161016f5780635c975abb1161013e5780635c975abb146103b15780636189d107146103c957806370a0eb94146103dc57806370e5a898146103f2576101cd565b80633f4ba83a1461031b578063474d561c1461033057806354fd4d501461036f5780635ab3716c14610391576101cd565b8063285a190a116101ab578063285a190a1461028957806331678cf6146102ab578063332caa1f146102db5780633a08e299146102fb576101cd565b8063011b2174146101d25780630acac94214610205578063283040b414610267575b600080fd5b3480156101de57600080fd5b506101f26101ed366004612ab4565b6105f9565b6040519081526020015b60405180910390f35b34801561021157600080fd5b50610248610220366004612ab4565b60d06020526000908152604090205460ff808216916101008104821691620100009091041683565b60408051931515845291151560208401521515908201526060016101fc565b34801561027357600080fd5b5061027c610618565b6040516101fc91906131d7565b34801561029557600080fd5b506102a96102a4366004612d57565b6108d1565b005b3480156102b757600080fd5b506102cb6102c6366004612ace565b610a88565b60405190151581526020016101fc565b3480156102e757600080fd5b506102a96102f6366004612bad565b610b3a565b34801561030757600080fd5b506102a9610316366004612e35565b6111e0565b34801561032757600080fd5b506102a96113dd565b34801561033c57600080fd5b506102cb61034b366004612ab4565b6001600160a01b0316600090815260d0602052604090205462010000900460ff1690565b34801561037b57600080fd5b506103846113f7565b6040516101fc919061333e565b34801561039d57600080fd5b506102cb6103ac366004612b77565b611485565b3480156103bd57600080fd5b5060975460ff166102cb565b6102a96103d7366004612b3f565b6114bf565b3480156103e857600080fd5b506101f260cc5481565b3480156103fe57600080fd5b5061041261040d3660046130e9565b61181b565b6040516001600160a01b0390911681526020016101fc565b34801561043657600080fd5b506102a9611845565b34801561044b57600080fd5b506101f261045a366004612f5b565b611857565b34801561046b57600080fd5b506101f260cb5481565b34801561048157600080fd5b506104a5610490366004612ab4565b60d16020526000908152604090205460ff1681565b60405160ff90911681526020016101fc565b3480156104c357600080fd5b506102a96118a4565b3480156104d857600080fd5b506065546001600160a01b0316610412565b3480156104f657600080fd5b506102cb610505366004612ab4565b6118bc565b34801561051657600080fd5b506102a9610525366004612fe7565b6119d2565b34801561053657600080fd5b506101f260cd5481565b34801561054c57600080fd5b506102cb61055b366004612ab4565b611c64565b34801561056c57600080fd5b506101f261057b366004612ab4565b60ce6020526000908152604090205481565b34801561059957600080fd5b506101f260ca5481565b3480156105af57600080fd5b506102cb6105be366004612b00565b611d79565b3480156105cf57600080fd5b506102a96105de366004612ab4565b612060565b3480156105ef57600080fd5b506101f260c95481565b6001600160a01b038116600090815260ce60205260409020545b919050565b60cf546060906000906001600160401b0381111561064657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106ae57816020015b61069b604051806080016040528060006001600160a01b031681526020016060815260200160608152602001600060ff1681525090565b8152602001906001900390816106645790505b50905060005b60cf548110156108cb57600060cf82815481106106e157634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316905060006040518060800160405280836001600160a01b03168152602001836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610792919081019061305a565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156107d057600080fd5b505afa1580156107e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261080c919081019061305a565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561084a57600080fd5b505afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190613101565b60ff168152509050808484815181106108ab57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505080806108c3906136f6565b9150506106b4565b50905090565b6000805b8851811015610a5e578681815181106108fe57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16600014610a4c576109b989828151811061093357634e487b7160e01b600052603260045260246000fd5b60200260200101518589848151811061095c57634e487b7160e01b600052603260045260246000fd5b602002602001015189858151811061098457634e487b7160e01b600052603260045260246000fd5b60200260200101518986815181106109ac57634e487b7160e01b600052603260045260246000fd5b60200260200101516120d9565b610a0a5760405162461bcd60e51b815260206004820181905260248201527f4f7261636c65207369676e617475726520646f6573206e6f74206d617463682e60448201526064015b60405180910390fd5b878181518110610a2a57634e487b7160e01b600052603260045260246000fd5b602002602001015182610a3d9190613524565b915082821115610a4c57610a5e565b80610a56816136f6565b9150506108d5565b50818111610a7e5760405162461bcd60e51b8152600401610a0190613397565b5050505050505050565b6000610a926121a3565b60405163f2fde38b60e01b81526001600160a01b03838116600483015284169063f2fde38b90602401600060405180830381600087803b158015610ad557600080fd5b505af1158015610ae9573d6000803e3d6000fd5b5050604080516001600160a01b038088168252861660208201527fb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699935001905060405180910390a150600192915050565b610b426121fd565b610b4a612257565b6001600160a01b038316600090815260d060209081526040918290208251606081018452905460ff8082161515835261010082048116151593830193909352620100009004909116151591810182905290610be35760405162461bcd60e51b8152602060048201526019602482015278556e737570706f7274656420746f6b656e206164647265737360381b6044820152606401610a01565b8060200151610c275760405162461bcd60e51b815260206004820152601060248201526f151bdad95b881dd85cc81c185d5cd95960821b6044820152606401610a01565b6020808601516001600160a01b038616600090815260ce90925260409091205410610cba5760405162461bcd60e51b815260206004820152603760248201527f4e6577206261746368206e6f6e6365206d75737420626520677265617465722060448201527f7468616e207468652063757272656e74206e6f6e63652e0000000000000000006064820152608401610a01565b824310610d2f5760405162461bcd60e51b815260206004820152603c60248201527f42617463682074696d656f7574206d757374206265206772656174657220746860448201527f616e207468652063757272656e7420626c6f636b206865696768742e000000006064820152608401610a01565b8b518d51148015610d4157508a518d51145b8015610d4e575089518d51145b8015610d5b575088518d51145b610da75760405162461bcd60e51b815260206004820152601d60248201527f4d616c666f726d65642063757272656e74206f7261636c65207365742e0000006044820152606401610a01565b60cc54610dbf8e8e886000602002015160c954611857565b14610ddc5760405162461bcd60e51b8152600401610a01906133f4565b86518851148015610dee575085518851145b610e3a5760405162461bcd60e51b815260206004820181905260248201527f4d616c666f726d6564206261746368206f66207472616e73616374696f6e732e6044820152606401610a01565b610ebb8d8d8d8d8d60c9546f0e8e4c2dce6c2c6e8d2dedc84c2e8c6d60831b8f8f8f8f600160028110610e7d57634e487b7160e01b600052603260045260246000fd5b60200201518f8f8f604051602001610e9d999897969594939291906132c1565b6040516020818303038152906040528051906020012060ca546108d1565b6020808601516001600160a01b038616600090815260ce835260408082209290925560d190925281205460ff16908115610f6657856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2857600080fd5b505afa158015610f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f609190613101565b60ff1690505b6000805b8b518110156110d857610fad8a8281518110610f9657634e487b7160e01b600052603260045260246000fd5b60200260200101518361229d90919063ffffffff16565b855190925015156001141561105857876001600160a01b03166340c10f19308e8481518110610fec57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016110259291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050505b6110c68b828151811061107b57634e487b7160e01b600052603260045260246000fd5b60200260200101516110b58e84815181106110a657634e487b7160e01b600052603260045260246000fd5b602002602001015187876122a9565b6001600160a01b038b1691906122e0565b806110d0816136f6565b915050610f6a565b508351151560011415611146576040516340c10f1960e01b8152306004820152602481018290526001600160a01b038816906340c10f1990604401600060405180830381600087803b15801561112d57600080fd5b505af1158015611141573d6000803e3d6000fd5b505050505b611166856111558386866122a9565b6001600160a01b038a1691906122e0565b505060cb5461117992509050600161229d565b60cb556001600160a01b03831684600160200201517f02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab70860cb546040516111c191815260200190565b60405180910390a36111d260018055565b505050505050505050505050565b6111e8612257565b83871161125d5760405162461bcd60e51b815260206004820152603b60248201527f4e6577206f7261636c6520736574206e6f6e6365206d7573742062652067726560448201527f61746572207468616e207468652063757272656e74206e6f6e636500000000006064820152608401610a01565b87518951146112ae5760405162461bcd60e51b815260206004820152601860248201527f4d616c666f726d6564206e6577206f7261636c652073657400000000000000006044820152606401610a01565b845186511480156112c0575082518651145b80156112cd575081518651145b80156112da575080518651145b6113265760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610a01565b60cc5461133787878760c954611857565b146113545760405162461bcd60e51b8152600401610a01906133f4565b60006113648a8a8a60c954611857565b905061137787878686868660ca546108d1565b60cc81905560cd88905560cb5461138f90600161229d565b60cb81905560405189917f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3916113c991908e908e9061349c565b60405180910390a250505050505050505050565b6113e56121a3565b6113ed61234e565b6113f5612397565b565b60d28054611404906136bb565b80601f0160208091040260200160405190810160405280929190818152602001828054611430906136bb565b801561147d5780601f106114525761010080835404028352916020019161147d565b820191906000526020600020905b81548152906001019060200180831161146057829003601f168201915b505050505081565b600061148f6121a3565b506001600160a01b038216600090815260d160205260409020805460ff831660ff19909116179055600192915050565b6114c76121fd565b6114cf612257565b6000811161152a5760405162461bcd60e51b815260206004820152602260248201527f616d6f756e742073686f756c642062652067726561746572207468616e207a65604482015261726f60f01b6064820152608401610a01565b6001600160a01b038416600090815260d060209081526040918290208251606081018452905460ff80821615158352610100820481161515938301939093526201000090049091161515918101829052906115c35760405162461bcd60e51b8152602060048201526019602482015278556e737570706f7274656420746f6b656e206164647265737360381b6044820152606401610a01565b80602001516116075760405162461bcd60e51b815260206004820152601060248201526f1d1bdad95b881dd85cc81c185d5cd95960821b6044820152606401610a01565b805182901515600114156116895761162a6001600160a01b0387163330866123e9565b604051630852cd8d60e31b8152600481018490526001600160a01b038716906342966c6890602401600060405180830381600087803b15801561166c57600080fd5b505af1158015611680573d6000803e3d6000fd5b505050506117a6565b6001600160a01b038616600090815260d1602052604090205460ff16801561178f576000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e657600080fd5b505afa1580156116fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171e9190613101565b60ff16905061172e8582846122a9565b925061173b8383836122a9565b94506000851161178d5760405162461bcd60e51b815260206004820152601860248201527f436f6e76657274656420616d6f756e74206973207a65726f00000000000000006044820152606401610a01565b505b6117a46001600160a01b0388163330876123e9565b505b60cb546117b490600161229d565b60cb819055604080518681526020810184905290810191909152859033906001600160a01b038916907f034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c9060600160405180910390a4505061181560018055565b50505050565b60cf818154811061182b57600080fd5b6000918252602090912001546001600160a01b0316905081565b61184d6121a3565b6113f56000612421565b6040516000906918da1958dadc1bda5b9d60b21b90611882908490839087908a908a9060200161327e565b604051602081830303815290604052805190602001209150505b949350505050565b6118ac6121a3565b6118b4612257565b6113f5612473565b60006118c66121a3565b6001600160a01b038216600090815260d0602052604090205462010000900460ff1615156001146119395760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610a01565b6001600160a01b038216600090815260d0602052604090205460ff6101009091041615156001146119ac5760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792070617573656400000000006044820152606401610a01565b506001600160a01b0316600090815260d060205260409020805461ff0019169055600190565b600054610100900460ff16158080156119f25750600054600160ff909116105b80611a0c5750303b158015611a0c575060005460ff166001145b611a6f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a01565b6000805460ff191660011790558015611a92576000805461ff0019166101001790555b611a9a6124b0565b611aa26124df565b611aaa61250e565b8151835114611afb5760405162461bcd60e51b815260206004820152601c60248201527f4d616c666f726d65642063757272656e74206f7261636c6520736574000000006044820152606401610a01565b6000805b8351811015611b5c57838181518110611b2857634e487b7160e01b600052603260045260246000fd5b602002602001015182611b3b9190613524565b915085821115611b4a57611b5c565b80611b54816136f6565b915050611aff565b50848111611b7c5760405162461bcd60e51b8152600401610a0190613397565b6000611b8b858560008a611857565b60c988905560ca87905560cc819055600060cd55600160cb55604080518082019091526005808252640312e302e360dc1b6020909201918252919250611bd49160d2919061287d565b5060cd547f36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b360cb548787604051611c0d9392919061349c565b60405180910390a250508015611c5d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000611c6e6121a3565b6001600160a01b038216600090815260d0602052604090205462010000900460ff161515600114611ce15760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20646f65736e27742065786973747300000000006044820152606401610a01565b6001600160a01b038216600090815260d06020526040902054610100900460ff1615611d4f5760405162461bcd60e51b815260206004820152601c60248201527f42726964676520746f6b656e20616c72656164792061637469766564000000006044820152606401610a01565b506001600160a01b0316600090815260d060205260409020805461ff001916610100179055600190565b6000611d836121a3565b6001600160a01b038416611dd15760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b6044820152606401610a01565b6001600160a01b038416600090815260d0602052604090205462010000900460ff1615611e405760405162461bcd60e51b815260206004820152601b60248201527f42726964676520746f6b656e20616c72656164792065786973747300000000006044820152606401610a01565b611e6c84604051806060016040528085151581526020016001151581526020016001151581525061253d565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611ea757600080fd5b505afa158015611ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edf9190613101565b6001600160a01b038616600090815260d1602052604090205490915060ff1615611f2157506001600160a01b038416600090815260d1602052604090205460ff165b846001600160a01b03167f2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f866001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015611f8557600080fd5b505afa158015611f99573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611fc1919081019061305a565b876001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015611ffa57600080fd5b505afa15801561200e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612036919081019061305a565b60cb5460405161204b93929187918b90613351565b60405180910390a260019150505b9392505050565b6120686121a3565b6001600160a01b0381166120cd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a01565b6120d681612421565b50565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018590526000908190605c0160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015612179573d6000803e3d6000fd5b505050602060405103516001600160a01b0316876001600160a01b03161491505095945050505050565b6065546001600160a01b031633146113f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a01565b600260015414156122505760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a01565b6002600155565b60975460ff16156113f55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a01565b60006120598284613524565b6000816122b7575082612059565b61189c6122c584600a6135a2565b6122da6122d385600a6135a2565b87906125e9565b906125f5565b6040516001600160a01b03831660248201526044810182905261234390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612601565b505050565b60018055565b60975460ff166113f55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a01565b61239f61234e565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03808516602483015283166044820152606481018290526118159085906323b872dd60e01b9060840161230c565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61247b612257565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123cc3390565b600054610100900460ff166124d75760405162461bcd60e51b8152600401610a0190613451565b6113f56126d3565b600054610100900460ff166125065760405162461bcd60e51b8152600401610a0190613451565b6113f5612706565b600054610100900460ff166125355760405162461bcd60e51b8152600401610a0190613451565b6113f5612736565b60cf805460018082019092557facb8d954e2cfef495862221e91bd7523613cf8808827cb33edfe4904cc51bf290180546001600160a01b0319166001600160a01b038516908117909155600090815260d0602090815260409182902084518154928601519386015160ff199093169015151761ff001916610100931515939093029290921762ff00001916620100009115159190910217905560cb546125e29161229d565b60cb555050565b60006120598284613670565b6000612059828461353c565b6000612656826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661275d9092919063ffffffff16565b80519091501561234357808060200190518101906126749190612fcb565b6123435760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a01565b600054610100900460ff166126fa5760405162461bcd60e51b8152600401610a0190613451565b6097805460ff19169055565b600054610100900460ff1661272d5760405162461bcd60e51b8152600401610a0190613451565b6113f533612421565b600054610100900460ff166123485760405162461bcd60e51b8152600401610a0190613451565b606061189c848460008585600080866001600160a01b0316858760405161278491906131bb565b60006040518083038185875af1925050503d80600081146127c1576040519150601f19603f3d011682016040523d82523d6000602084013e6127c6565b606091505b50915091506127d7878383876127e2565b979650505050505050565b6060831561284e578251612847576001600160a01b0385163b6128475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a01565b508161189c565b61189c83838151156128635781518083602001fd5b8060405162461bcd60e51b8152600401610a01919061333e565b828054612889906136bb565b90600052602060002090601f0160209004810192826128ab57600085556128f1565b82601f106128c457805160ff19168380011785556128f1565b828001600101855582156128f1579182015b828111156128f15782518255916020019190600101906128d6565b506128fd929150612901565b5090565b5b808211156128fd5760008155600101612902565b80356001600160a01b038116811461061357600080fd5b600082601f83011261293d578081fd5b8135602061295261294d83613501565b6134d1565b828152818101908583018385028701840188101561296e578586fd5b855b858110156129935761298182612916565b84529284019290840190600101612970565b5090979650505050505050565b600082601f8301126129b0578081fd5b813560206129c061294d83613501565b82815281810190858301838502870184018810156129dc578586fd5b855b85811015612993578135845292840192908401906001016129de565b600082601f830112612a0a578081fd5b612a1460406134d1565b808385604086011115612a25578384fd5b835b6002811015612a46578135845260209384019390910190600101612a27565b509095945050505050565b600082601f830112612a61578081fd5b81356020612a7161294d83613501565b8281528181019085830183850287018401881015612a8d578586fd5b855b85811015612993578135612aa28161374b565b84529284019290840190600101612a8f565b600060208284031215612ac5578081fd5b61205982612916565b60008060408385031215612ae0578081fd5b612ae983612916565b9150612af760208401612916565b90509250929050565b600080600060608486031215612b14578081fd5b612b1d84612916565b9250602084013591506040840135612b348161373d565b809150509250925092565b60008060008060808587031215612b54578081fd5b612b5d85612916565b966020860135965060408601359560600135945092505050565b60008060408385031215612b89578182fd5b612b9283612916565b91506020830135612ba28161374b565b809150509250929050565b6000806000806000806000806000806000806101a08d8f031215612bcf57898afd5b6001600160401b038d351115612be357898afd5b612bf08e8e358f0161292d565b9b506001600160401b0360208e01351115612c0957898afd5b612c198e60208f01358f016129a0565b9a506001600160401b0360408e01351115612c3257898afd5b612c428e60408f01358f01612a51565b99506001600160401b0360608e01351115612c5b578788fd5b612c6b8e60608f01358f016129a0565b98506001600160401b0360808e01351115612c84578788fd5b612c948e60808f01358f016129a0565b97506001600160401b0360a08e01351115612cad578687fd5b612cbd8e60a08f01358f016129a0565b96506001600160401b0360c08e01351115612cd6578586fd5b612ce68e60c08f01358f0161292d565b95506001600160401b0360e08e01351115612cff578485fd5b612d0f8e60e08f01358f016129a0565b9450612d1f8e6101008f016129fa565b9350612d2e6101408e01612916565b92506101608d01359150612d456101808e01612916565b90509295989b509295989b509295989b565b600080600080600080600060e0888a031215612d71578081fd5b87356001600160401b0380821115612d87578283fd5b612d938b838c0161292d565b985060208a0135915080821115612da8578283fd5b612db48b838c016129a0565b975060408a0135915080821115612dc9578283fd5b612dd58b838c01612a51565b965060608a0135915080821115612dea578283fd5b612df68b838c016129a0565b955060808a0135915080821115612e0b578283fd5b50612e188a828b016129a0565b93505060a0880135915060c0880135905092959891949750929550565b60008060008060008060008060006101208a8c031215612e53578283fd5b89356001600160401b0380821115612e69578485fd5b612e758d838e0161292d565b9a5060208c0135915080821115612e8a578485fd5b612e968d838e016129a0565b995060408c0135985060608c0135915080821115612eb2578485fd5b612ebe8d838e0161292d565b975060808c0135915080821115612ed3578485fd5b612edf8d838e016129a0565b965060a08c0135955060c08c0135915080821115612efb578485fd5b612f078d838e01612a51565b945060e08c0135915080821115612f1c578384fd5b612f288d838e016129a0565b93506101008c0135915080821115612f3e578283fd5b50612f4b8c828d016129a0565b9150509295985092959850929598565b60008060008060808587031215612f70578182fd5b84356001600160401b0380821115612f86578384fd5b612f928883890161292d565b95506020870135915080821115612fa7578384fd5b50612fb4878288016129a0565b949794965050505060408301359260600135919050565b600060208284031215612fdc578081fd5b81516120598161373d565b60008060008060808587031215612ffc578182fd5b843593506020850135925060408501356001600160401b0380821115613020578384fd5b61302c8883890161292d565b93506060870135915080821115613041578283fd5b5061304e878288016129a0565b91505092959194509250565b60006020828403121561306b578081fd5b81516001600160401b0380821115613081578283fd5b818401915084601f830112613094578283fd5b8151818111156130a6576130a6613727565b6130b9601f8201601f19166020016134d1565b91508082528560208285010111156130cf578384fd5b6130e081602084016020860161368f565b50949350505050565b6000602082840312156130fa578081fd5b5035919050565b600060208284031215613112578081fd5b81516120598161374b565b6000815180845260208085019450808401835b838110156131555781516001600160a01b031687529582019590820190600101613130565b509495945050505050565b6000815180845260208085019450808401835b8381101561315557815187529582019590820190600101613173565b600081518084526131a781602086016020860161368f565b601f01601f19169290920160200192915050565b600082516131cd81846020870161368f565b9190910192915050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561327057888303603f19018552815180516001600160a01b03168452878101516080898601819052906132348287018261318f565b915050878201518582038987015261324c828261318f565b60609384015160ff16969093019590955250948701949250908601906001016131fb565b509098975050505050505050565b600086825285602083015284604083015260a060608301526132a360a083018561311d565b82810360808401526132b58185613160565b98975050505050505050565b60006101208b83528a60208401528060408401526132e18184018b613160565b905082810360608401526132f5818a61311d565b905082810360808401526133098189613160565b60a084019790975250506001600160a01b0393841660c082015260e08101929092529091166101009091015295945050505050565b600060208252612059602083018461318f565b600060a0825261336460a083018861318f565b8281036020840152613376818861318f565b60ff9690961660408401525050606081019290925260809091015292915050565b60208082526039908201527f5375626d6974746564206f7261636c6520736574207369676e6174757265732060408201527f646f206e6f74206861766520656e6f75676820706f7765722e00000000000000606082015260800190565b6020808252603c908201527f537570706c6965642063757272656e74206f7261636c657320616e6420706f7760408201527f65727320646f206e6f74206d6174636820636865636b706f696e742e00000000606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000848252606060208301526134b5606083018561311d565b82810360408401526134c78185613160565b9695505050505050565b604051601f8201601f191681016001600160401b03811182821017156134f9576134f9613727565b604052919050565b60006001600160401b0382111561351a5761351a613727565b5060209081020190565b6000821982111561353757613537613711565b500190565b60008261355757634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161356e5750613599565b81870482111561358057613580613711565b8086161561358d57918102915b9490941c93800261355f565b94509492505050565b600061205960001984846000826135bb57506001612059565b816135c857506000612059565b81600181146135de57600281146135e857613615565b6001915050612059565b60ff8411156135f9576135f9613711565b6001841b91508482111561360f5761360f613711565b50612059565b5060208310610133831016604e8410600b8410161715613648575081810a8381111561364357613643613711565b612059565b613655848484600161355c565b80860482111561366757613667613711565b02949350505050565b600081600019048311821515161561368a5761368a613711565b500290565b60005b838110156136aa578181015183820152602001613692565b838111156118155750506000910152565b6002810460018216806136cf57607f821691505b602082108114156136f057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561370a5761370a613711565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146120d657600080fd5b60ff811681146120d657600080fdfea26469706673582212203ed4db4452013a8a70c543ceb34e90480323497170ec1e0f38832a274aef681464736f6c63430008020033",
}

// FxBridgeLogicBSCABI is the input ABI used to generate the binding from.
// Deprecated: Use FxBridgeLogicBSCMetaData.ABI instead.
var FxBridgeLogicBSCABI = FxBridgeLogicBSCMetaData.ABI

// FxBridgeLogicBSCBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FxBridgeLogicBSCMetaData.Bin instead.
var FxBridgeLogicBSCBin = FxBridgeLogicBSCMetaData.Bin

// DeployFxBridgeLogicBSC deploys a new Ethereum contract, binding an instance of FxBridgeLogicBSC to it.
func DeployFxBridgeLogicBSC(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FxBridgeLogicBSC, error) {
	parsed, err := FxBridgeLogicBSCMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FxBridgeLogicBSCBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FxBridgeLogicBSC{FxBridgeLogicBSCCaller: FxBridgeLogicBSCCaller{contract: contract}, FxBridgeLogicBSCTransactor: FxBridgeLogicBSCTransactor{contract: contract}, FxBridgeLogicBSCFilterer: FxBridgeLogicBSCFilterer{contract: contract}}, nil
}

// FxBridgeLogicBSC is an auto generated Go binding around an Ethereum contract.
type FxBridgeLogicBSC struct {
	FxBridgeLogicBSCCaller     // Read-only binding to the contract
	FxBridgeLogicBSCTransactor // Write-only binding to the contract
	FxBridgeLogicBSCFilterer   // Log filterer for contract events
}

// FxBridgeLogicBSCCaller is an auto generated read-only Go binding around an Ethereum contract.
type FxBridgeLogicBSCCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicBSCTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FxBridgeLogicBSCTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicBSCFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FxBridgeLogicBSCFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FxBridgeLogicBSCSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FxBridgeLogicBSCSession struct {
	Contract     *FxBridgeLogicBSC // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FxBridgeLogicBSCCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FxBridgeLogicBSCCallerSession struct {
	Contract *FxBridgeLogicBSCCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// FxBridgeLogicBSCTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FxBridgeLogicBSCTransactorSession struct {
	Contract     *FxBridgeLogicBSCTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// FxBridgeLogicBSCRaw is an auto generated low-level Go binding around an Ethereum contract.
type FxBridgeLogicBSCRaw struct {
	Contract *FxBridgeLogicBSC // Generic contract binding to access the raw methods on
}

// FxBridgeLogicBSCCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FxBridgeLogicBSCCallerRaw struct {
	Contract *FxBridgeLogicBSCCaller // Generic read-only contract binding to access the raw methods on
}

// FxBridgeLogicBSCTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FxBridgeLogicBSCTransactorRaw struct {
	Contract *FxBridgeLogicBSCTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFxBridgeLogicBSC creates a new instance of FxBridgeLogicBSC, bound to a specific deployed contract.
func NewFxBridgeLogicBSC(address common.Address, backend bind.ContractBackend) (*FxBridgeLogicBSC, error) {
	contract, err := bindFxBridgeLogicBSC(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSC{FxBridgeLogicBSCCaller: FxBridgeLogicBSCCaller{contract: contract}, FxBridgeLogicBSCTransactor: FxBridgeLogicBSCTransactor{contract: contract}, FxBridgeLogicBSCFilterer: FxBridgeLogicBSCFilterer{contract: contract}}, nil
}

// NewFxBridgeLogicBSCCaller creates a new read-only instance of FxBridgeLogicBSC, bound to a specific deployed contract.
func NewFxBridgeLogicBSCCaller(address common.Address, caller bind.ContractCaller) (*FxBridgeLogicBSCCaller, error) {
	contract, err := bindFxBridgeLogicBSC(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCCaller{contract: contract}, nil
}

// NewFxBridgeLogicBSCTransactor creates a new write-only instance of FxBridgeLogicBSC, bound to a specific deployed contract.
func NewFxBridgeLogicBSCTransactor(address common.Address, transactor bind.ContractTransactor) (*FxBridgeLogicBSCTransactor, error) {
	contract, err := bindFxBridgeLogicBSC(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCTransactor{contract: contract}, nil
}

// NewFxBridgeLogicBSCFilterer creates a new log filterer instance of FxBridgeLogicBSC, bound to a specific deployed contract.
func NewFxBridgeLogicBSCFilterer(address common.Address, filterer bind.ContractFilterer) (*FxBridgeLogicBSCFilterer, error) {
	contract, err := bindFxBridgeLogicBSC(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCFilterer{contract: contract}, nil
}

// bindFxBridgeLogicBSC binds a generic wrapper to an already deployed contract.
func bindFxBridgeLogicBSC(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FxBridgeLogicBSCMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogicBSC *FxBridgeLogicBSCRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogicBSC.Contract.FxBridgeLogicBSCCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogicBSC *FxBridgeLogicBSCRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.FxBridgeLogicBSCTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogicBSC *FxBridgeLogicBSCRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.FxBridgeLogicBSCTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FxBridgeLogicBSC.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.contract.Transact(opts, method, params...)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) BridgeTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "bridgeTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogicBSC.Contract.BridgeTokens(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// BridgeTokens is a free data retrieval call binding the contract method 0x70e5a898.
//
// Solidity: function bridgeTokens(uint256 ) view returns(address)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) BridgeTokens(arg0 *big.Int) (common.Address, error) {
	return _FxBridgeLogicBSC.Contract.BridgeTokens(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) CheckAssetStatus(opts *bind.CallOpts, _tokenAddr common.Address) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "checkAssetStatus", _tokenAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogicBSC.Contract.CheckAssetStatus(&_FxBridgeLogicBSC.CallOpts, _tokenAddr)
}

// CheckAssetStatus is a free data retrieval call binding the contract method 0x474d561c.
//
// Solidity: function checkAssetStatus(address _tokenAddr) view returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) CheckAssetStatus(_tokenAddr common.Address) (bool, error) {
	return _FxBridgeLogicBSC.Contract.CheckAssetStatus(&_FxBridgeLogicBSC.CallOpts, _tokenAddr)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) CheckOracleSignatures(opts *bind.CallOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "checkOracleSignatures", _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)

	if err != nil {
		return err
	}

	return err

}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogicBSC.Contract.CheckOracleSignatures(&_FxBridgeLogicBSC.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// CheckOracleSignatures is a free data retrieval call binding the contract method 0x285a190a.
//
// Solidity: function checkOracleSignatures(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, bytes32 _theHash, uint256 _powerThreshold) pure returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) CheckOracleSignatures(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _theHash [32]byte, _powerThreshold *big.Int) error {
	return _FxBridgeLogicBSC.Contract.CheckOracleSignatures(&_FxBridgeLogicBSC.CallOpts, _currentOracles, _currentPowers, _v, _r, _s, _theHash, _powerThreshold)
}

// ConvertDecimals is a free data retrieval call binding the contract method 0x7d9a8ea6.
//
// Solidity: function convert_decimals(address ) view returns(uint8)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) ConvertDecimals(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "convert_decimals", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ConvertDecimals is a free data retrieval call binding the contract method 0x7d9a8ea6.
//
// Solidity: function convert_decimals(address ) view returns(uint8)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) ConvertDecimals(arg0 common.Address) (uint8, error) {
	return _FxBridgeLogicBSC.Contract.ConvertDecimals(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// ConvertDecimals is a free data retrieval call binding the contract method 0x7d9a8ea6.
//
// Solidity: function convert_decimals(address ) view returns(uint8)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) ConvertDecimals(arg0 common.Address) (uint8, error) {
	return _FxBridgeLogicBSC.Contract.ConvertDecimals(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) GetBridgeTokenList(opts *bind.CallOpts) ([]FxBridgeLogicBSCBridgeToken, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "getBridgeTokenList")

	if err != nil {
		return *new([]FxBridgeLogicBSCBridgeToken), err
	}

	out0 := *abi.ConvertType(out[0], new([]FxBridgeLogicBSCBridgeToken)).(*[]FxBridgeLogicBSCBridgeToken)

	return out0, err

}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) GetBridgeTokenList() ([]FxBridgeLogicBSCBridgeToken, error) {
	return _FxBridgeLogicBSC.Contract.GetBridgeTokenList(&_FxBridgeLogicBSC.CallOpts)
}

// GetBridgeTokenList is a free data retrieval call binding the contract method 0x283040b4.
//
// Solidity: function getBridgeTokenList() view returns((address,string,string,uint8)[])
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) GetBridgeTokenList() ([]FxBridgeLogicBSCBridgeToken, error) {
	return _FxBridgeLogicBSC.Contract.GetBridgeTokenList(&_FxBridgeLogicBSC.CallOpts)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) LastBatchNonce(opts *bind.CallOpts, _erc20Address common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "lastBatchNonce", _erc20Address)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.LastBatchNonce(&_FxBridgeLogicBSC.CallOpts, _erc20Address)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.LastBatchNonce(&_FxBridgeLogicBSC.CallOpts, _erc20Address)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) MakeCheckpoint(opts *bind.CallOpts, _oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "makeCheckpoint", _oracles, _powers, _oracleSetNonce, _fxBridgeId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogicBSC.Contract.MakeCheckpoint(&_FxBridgeLogicBSC.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// MakeCheckpoint is a free data retrieval call binding the contract method 0x71cbf381.
//
// Solidity: function makeCheckpoint(address[] _oracles, uint256[] _powers, uint256 _oracleSetNonce, bytes32 _fxBridgeId) pure returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) MakeCheckpoint(_oracles []common.Address, _powers []*big.Int, _oracleSetNonce *big.Int, _fxBridgeId [32]byte) ([32]byte, error) {
	return _FxBridgeLogicBSC.Contract.MakeCheckpoint(&_FxBridgeLogicBSC.CallOpts, _oracles, _powers, _oracleSetNonce, _fxBridgeId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) Owner() (common.Address, error) {
	return _FxBridgeLogicBSC.Contract.Owner(&_FxBridgeLogicBSC.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) Owner() (common.Address, error) {
	return _FxBridgeLogicBSC.Contract.Owner(&_FxBridgeLogicBSC.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) Paused() (bool, error) {
	return _FxBridgeLogicBSC.Contract.Paused(&_FxBridgeLogicBSC.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) Paused() (bool, error) {
	return _FxBridgeLogicBSC.Contract.Paused(&_FxBridgeLogicBSC.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) StateFxBridgeId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "state_fxBridgeId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogicBSC.Contract.StateFxBridgeId(&_FxBridgeLogicBSC.CallOpts)
}

// StateFxBridgeId is a free data retrieval call binding the contract method 0xf92367fd.
//
// Solidity: function state_fxBridgeId() view returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) StateFxBridgeId() ([32]byte, error) {
	return _FxBridgeLogicBSC.Contract.StateFxBridgeId(&_FxBridgeLogicBSC.CallOpts)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) StateLastBatchNonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "state_lastBatchNonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StateLastBatchNonces(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StateLastBatchNonces(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) StateLastEventNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "state_lastEventNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StateLastEventNonce(&_FxBridgeLogicBSC.CallOpts)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) StateLastEventNonce() (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StateLastEventNonce(&_FxBridgeLogicBSC.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) StateLastOracleSetCheckpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "state_lastOracleSetCheckpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogicBSC.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogicBSC.CallOpts)
}

// StateLastOracleSetCheckpoint is a free data retrieval call binding the contract method 0x70a0eb94.
//
// Solidity: function state_lastOracleSetCheckpoint() view returns(bytes32)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) StateLastOracleSetCheckpoint() ([32]byte, error) {
	return _FxBridgeLogicBSC.Contract.StateLastOracleSetCheckpoint(&_FxBridgeLogicBSC.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) StateLastOracleSetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "state_lastOracleSetNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StateLastOracleSetNonce(&_FxBridgeLogicBSC.CallOpts)
}

// StateLastOracleSetNonce is a free data retrieval call binding the contract method 0xbb83bf96.
//
// Solidity: function state_lastOracleSetNonce() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) StateLastOracleSetNonce() (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StateLastOracleSetNonce(&_FxBridgeLogicBSC.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) StatePowerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "state_powerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StatePowerThreshold(&_FxBridgeLogicBSC.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) StatePowerThreshold() (*big.Int, error) {
	return _FxBridgeLogicBSC.Contract.StatePowerThreshold(&_FxBridgeLogicBSC.CallOpts)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) TokenStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "tokenStatus", arg0)

	outstruct := new(struct {
		IsOriginated bool
		IsActive     bool
		IsExist      bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.IsOriginated = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.IsActive = *abi.ConvertType(out[1], new(bool)).(*bool)
	outstruct.IsExist = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogicBSC.Contract.TokenStatus(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// TokenStatus is a free data retrieval call binding the contract method 0x0acac942.
//
// Solidity: function tokenStatus(address ) view returns(bool isOriginated, bool isActive, bool isExist)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) TokenStatus(arg0 common.Address) (struct {
	IsOriginated bool
	IsActive     bool
	IsExist      bool
}, error) {
	return _FxBridgeLogicBSC.Contract.TokenStatus(&_FxBridgeLogicBSC.CallOpts, arg0)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _FxBridgeLogicBSC.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) Version() (string, error) {
	return _FxBridgeLogicBSC.Contract.Version(&_FxBridgeLogicBSC.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCCallerSession) Version() (string, error) {
	return _FxBridgeLogicBSC.Contract.Version(&_FxBridgeLogicBSC.CallOpts)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) ActiveBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "activeBridgeToken", _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.ActiveBridgeToken(&_FxBridgeLogicBSC.TransactOpts, _tokenAddr)
}

// ActiveBridgeToken is a paid mutator transaction binding the contract method 0xdde65aea.
//
// Solidity: function activeBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) ActiveBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.ActiveBridgeToken(&_FxBridgeLogicBSC.TransactOpts, _tokenAddr)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) AddBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "addBridgeToken", _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.AddBridgeToken(&_FxBridgeLogicBSC.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// AddBridgeToken is a paid mutator transaction binding the contract method 0xf1099f61.
//
// Solidity: function addBridgeToken(address _tokenAddr, bytes32 _channelIBC, bool _isOriginated) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) AddBridgeToken(_tokenAddr common.Address, _channelIBC [32]byte, _isOriginated bool) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.AddBridgeToken(&_FxBridgeLogicBSC.TransactOpts, _tokenAddr, _channelIBC, _isOriginated)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) Init(opts *bind.TransactOpts, _fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "init", _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.Init(&_FxBridgeLogicBSC.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Init is a paid mutator transaction binding the contract method 0xaa63a894.
//
// Solidity: function init(bytes32 _fxBridgeId, uint256 _powerThreshold, address[] _oracles, uint256[] _powers) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) Init(_fxBridgeId [32]byte, _powerThreshold *big.Int, _oracles []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.Init(&_FxBridgeLogicBSC.TransactOpts, _fxBridgeId, _powerThreshold, _oracles, _powers)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.Pause(&_FxBridgeLogicBSC.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) Pause() (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.Pause(&_FxBridgeLogicBSC.TransactOpts)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) PauseBridgeToken(opts *bind.TransactOpts, _tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "pauseBridgeToken", _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.PauseBridgeToken(&_FxBridgeLogicBSC.TransactOpts, _tokenAddr)
}

// PauseBridgeToken is a paid mutator transaction binding the contract method 0xa36a4ab0.
//
// Solidity: function pauseBridgeToken(address _tokenAddr) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) PauseBridgeToken(_tokenAddr common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.PauseBridgeToken(&_FxBridgeLogicBSC.TransactOpts, _tokenAddr)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.RenounceOwnership(&_FxBridgeLogicBSC.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.RenounceOwnership(&_FxBridgeLogicBSC.TransactOpts)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) payable returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) SendToFx(opts *bind.TransactOpts, _tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "sendToFx", _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) payable returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.SendToFx(&_FxBridgeLogicBSC.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SendToFx is a paid mutator transaction binding the contract method 0x6189d107.
//
// Solidity: function sendToFx(address _tokenContract, bytes32 _destination, bytes32 _targetIBC, uint256 _amount) payable returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) SendToFx(_tokenContract common.Address, _destination [32]byte, _targetIBC [32]byte, _amount *big.Int) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.SendToFx(&_FxBridgeLogicBSC.TransactOpts, _tokenContract, _destination, _targetIBC, _amount)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) SubmitBatch(opts *bind.TransactOpts, _currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "submitBatch", _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.SubmitBatch(&_FxBridgeLogicBSC.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x332caa1f.
//
// Solidity: function submitBatch(address[] _currentOracles, uint256[] _currentPowers, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256[2] _nonceArray, address _tokenContract, uint256 _batchTimeout, address _feeReceive) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) SubmitBatch(_currentOracles []common.Address, _currentPowers []*big.Int, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _nonceArray [2]*big.Int, _tokenContract common.Address, _batchTimeout *big.Int, _feeReceive common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.SubmitBatch(&_FxBridgeLogicBSC.TransactOpts, _currentOracles, _currentPowers, _v, _r, _s, _amounts, _destinations, _fees, _nonceArray, _tokenContract, _batchTimeout, _feeReceive)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) TransferOwner(opts *bind.TransactOpts, _token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "transferOwner", _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.TransferOwner(&_FxBridgeLogicBSC.TransactOpts, _token, _newOwner)
}

// TransferOwner is a paid mutator transaction binding the contract method 0x31678cf6.
//
// Solidity: function transferOwner(address _token, address _newOwner) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) TransferOwner(_token common.Address, _newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.TransferOwner(&_FxBridgeLogicBSC.TransactOpts, _token, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.TransferOwnership(&_FxBridgeLogicBSC.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.TransferOwnership(&_FxBridgeLogicBSC.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.Unpause(&_FxBridgeLogicBSC.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) Unpause() (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.Unpause(&_FxBridgeLogicBSC.TransactOpts)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) UpdateOracleSet(opts *bind.TransactOpts, _newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "updateOracleSet", _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.UpdateOracleSet(&_FxBridgeLogicBSC.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateOracleSet is a paid mutator transaction binding the contract method 0x3a08e299.
//
// Solidity: function updateOracleSet(address[] _newOracles, uint256[] _newPowers, uint256 _newOracleSetNonce, address[] _currentOracles, uint256[] _currentPowers, uint256 _currentOracleSetNonce, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) UpdateOracleSet(_newOracles []common.Address, _newPowers []*big.Int, _newOracleSetNonce *big.Int, _currentOracles []common.Address, _currentPowers []*big.Int, _currentOracleSetNonce *big.Int, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.UpdateOracleSet(&_FxBridgeLogicBSC.TransactOpts, _newOracles, _newPowers, _newOracleSetNonce, _currentOracles, _currentPowers, _currentOracleSetNonce, _v, _r, _s)
}

// UpdateTokenDecimalsConvert is a paid mutator transaction binding the contract method 0x5ab3716c.
//
// Solidity: function updateTokenDecimalsConvert(address _token, uint8 _to) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactor) UpdateTokenDecimalsConvert(opts *bind.TransactOpts, _token common.Address, _to uint8) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.contract.Transact(opts, "updateTokenDecimalsConvert", _token, _to)
}

// UpdateTokenDecimalsConvert is a paid mutator transaction binding the contract method 0x5ab3716c.
//
// Solidity: function updateTokenDecimalsConvert(address _token, uint8 _to) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCSession) UpdateTokenDecimalsConvert(_token common.Address, _to uint8) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.UpdateTokenDecimalsConvert(&_FxBridgeLogicBSC.TransactOpts, _token, _to)
}

// UpdateTokenDecimalsConvert is a paid mutator transaction binding the contract method 0x5ab3716c.
//
// Solidity: function updateTokenDecimalsConvert(address _token, uint8 _to) returns(bool)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCTransactorSession) UpdateTokenDecimalsConvert(_token common.Address, _to uint8) (*types.Transaction, error) {
	return _FxBridgeLogicBSC.Contract.UpdateTokenDecimalsConvert(&_FxBridgeLogicBSC.TransactOpts, _token, _to)
}

// FxBridgeLogicBSCAddBridgeTokenEventIterator is returned from FilterAddBridgeTokenEvent and is used to iterate over the raw logs and unpacked data for AddBridgeTokenEvent events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCAddBridgeTokenEventIterator struct {
	Event *FxBridgeLogicBSCAddBridgeTokenEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCAddBridgeTokenEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCAddBridgeTokenEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCAddBridgeTokenEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCAddBridgeTokenEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCAddBridgeTokenEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCAddBridgeTokenEvent represents a AddBridgeTokenEvent event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCAddBridgeTokenEvent struct {
	TokenContract common.Address
	Name          string
	Symbol        string
	Decimals      uint8
	EventNonce    *big.Int
	ChannelIBC    [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAddBridgeTokenEvent is a free log retrieval operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterAddBridgeTokenEvent(opts *bind.FilterOpts, _tokenContract []common.Address) (*FxBridgeLogicBSCAddBridgeTokenEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCAddBridgeTokenEventIterator{contract: _FxBridgeLogicBSC.contract, event: "AddBridgeTokenEvent", logs: logs, sub: sub}, nil
}

// WatchAddBridgeTokenEvent is a free log subscription operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchAddBridgeTokenEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCAddBridgeTokenEvent, _tokenContract []common.Address) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "AddBridgeTokenEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCAddBridgeTokenEvent)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddBridgeTokenEvent is a log parse operation binding the contract event 0x2da8f37eaabc4d44ba4fcc438e404bbed3344322280d6c67497e9c668c87ec0f.
//
// Solidity: event AddBridgeTokenEvent(address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce, bytes32 _channelIBC)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseAddBridgeTokenEvent(log types.Log) (*FxBridgeLogicBSCAddBridgeTokenEvent, error) {
	event := new(FxBridgeLogicBSCAddBridgeTokenEvent)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "AddBridgeTokenEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCInitializedIterator struct {
	Event *FxBridgeLogicBSCInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCInitialized represents a Initialized event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterInitialized(opts *bind.FilterOpts) (*FxBridgeLogicBSCInitializedIterator, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCInitializedIterator{contract: _FxBridgeLogicBSC.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCInitialized) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCInitialized)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseInitialized(log types.Log) (*FxBridgeLogicBSCInitialized, error) {
	event := new(FxBridgeLogicBSCInitialized)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCOracleSetUpdatedEventIterator is returned from FilterOracleSetUpdatedEvent and is used to iterate over the raw logs and unpacked data for OracleSetUpdatedEvent events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCOracleSetUpdatedEventIterator struct {
	Event *FxBridgeLogicBSCOracleSetUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCOracleSetUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCOracleSetUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCOracleSetUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCOracleSetUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCOracleSetUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCOracleSetUpdatedEvent represents a OracleSetUpdatedEvent event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCOracleSetUpdatedEvent struct {
	NewOracleSetNonce *big.Int
	EventNonce        *big.Int
	Oracles           []common.Address
	Powers            []*big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterOracleSetUpdatedEvent is a free log retrieval operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterOracleSetUpdatedEvent(opts *bind.FilterOpts, _newOracleSetNonce []*big.Int) (*FxBridgeLogicBSCOracleSetUpdatedEventIterator, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCOracleSetUpdatedEventIterator{contract: _FxBridgeLogicBSC.contract, event: "OracleSetUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchOracleSetUpdatedEvent is a free log subscription operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchOracleSetUpdatedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCOracleSetUpdatedEvent, _newOracleSetNonce []*big.Int) (event.Subscription, error) {

	var _newOracleSetNonceRule []interface{}
	for _, _newOracleSetNonceItem := range _newOracleSetNonce {
		_newOracleSetNonceRule = append(_newOracleSetNonceRule, _newOracleSetNonceItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "OracleSetUpdatedEvent", _newOracleSetNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCOracleSetUpdatedEvent)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOracleSetUpdatedEvent is a log parse operation binding the contract event 0x36c6022aad02313069de85ca9645431c7dd5e8e7a21685586461c4b25e2374b3.
//
// Solidity: event OracleSetUpdatedEvent(uint256 indexed _newOracleSetNonce, uint256 _eventNonce, address[] _oracles, uint256[] _powers)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseOracleSetUpdatedEvent(log types.Log) (*FxBridgeLogicBSCOracleSetUpdatedEvent, error) {
	event := new(FxBridgeLogicBSCOracleSetUpdatedEvent)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "OracleSetUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCOwnershipTransferredIterator struct {
	Event *FxBridgeLogicBSCOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCOwnershipTransferred represents a OwnershipTransferred event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FxBridgeLogicBSCOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCOwnershipTransferredIterator{contract: _FxBridgeLogicBSC.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCOwnershipTransferred)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseOwnershipTransferred(log types.Log) (*FxBridgeLogicBSCOwnershipTransferred, error) {
	event := new(FxBridgeLogicBSCOwnershipTransferred)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCPausedIterator struct {
	Event *FxBridgeLogicBSCPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCPaused represents a Paused event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterPaused(opts *bind.FilterOpts) (*FxBridgeLogicBSCPausedIterator, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCPausedIterator{contract: _FxBridgeLogicBSC.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCPaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCPaused)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParsePaused(log types.Log) (*FxBridgeLogicBSCPaused, error) {
	event := new(FxBridgeLogicBSCPaused)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCSendToFxEventIterator is returned from FilterSendToFxEvent and is used to iterate over the raw logs and unpacked data for SendToFxEvent events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCSendToFxEventIterator struct {
	Event *FxBridgeLogicBSCSendToFxEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCSendToFxEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCSendToFxEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCSendToFxEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCSendToFxEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCSendToFxEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCSendToFxEvent represents a SendToFxEvent event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCSendToFxEvent struct {
	TokenContract common.Address
	Sender        common.Address
	Destination   [32]byte
	TargetIBC     [32]byte
	Amount        *big.Int
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendToFxEvent is a free log retrieval operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterSendToFxEvent(opts *bind.FilterOpts, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (*FxBridgeLogicBSCSendToFxEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCSendToFxEventIterator{contract: _FxBridgeLogicBSC.contract, event: "SendToFxEvent", logs: logs, sub: sub}, nil
}

// WatchSendToFxEvent is a free log subscription operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchSendToFxEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCSendToFxEvent, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "SendToFxEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCSendToFxEvent)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendToFxEvent is a log parse operation binding the contract event 0x034c5b22dd525a50d0a6b15549df0a6ac83b833a6c3da57ea16890832c72507c.
//
// Solidity: event SendToFxEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, bytes32 _targetIBC, uint256 _amount, uint256 _eventNonce)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseSendToFxEvent(log types.Log) (*FxBridgeLogicBSCSendToFxEvent, error) {
	event := new(FxBridgeLogicBSCSendToFxEvent)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "SendToFxEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCTransactionBatchExecutedEventIterator is returned from FilterTransactionBatchExecutedEvent and is used to iterate over the raw logs and unpacked data for TransactionBatchExecutedEvent events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCTransactionBatchExecutedEventIterator struct {
	Event *FxBridgeLogicBSCTransactionBatchExecutedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCTransactionBatchExecutedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCTransactionBatchExecutedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCTransactionBatchExecutedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCTransactionBatchExecutedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCTransactionBatchExecutedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCTransactionBatchExecutedEvent represents a TransactionBatchExecutedEvent event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCTransactionBatchExecutedEvent struct {
	BatchNonce *big.Int
	Token      common.Address
	EventNonce *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionBatchExecutedEvent is a free log retrieval operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterTransactionBatchExecutedEvent(opts *bind.FilterOpts, _batchNonce []*big.Int, _token []common.Address) (*FxBridgeLogicBSCTransactionBatchExecutedEventIterator, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCTransactionBatchExecutedEventIterator{contract: _FxBridgeLogicBSC.contract, event: "TransactionBatchExecutedEvent", logs: logs, sub: sub}, nil
}

// WatchTransactionBatchExecutedEvent is a free log subscription operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchTransactionBatchExecutedEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCTransactionBatchExecutedEvent, _batchNonce []*big.Int, _token []common.Address) (event.Subscription, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCTransactionBatchExecutedEvent)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionBatchExecutedEvent is a log parse operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseTransactionBatchExecutedEvent(log types.Log) (*FxBridgeLogicBSCTransactionBatchExecutedEvent, error) {
	event := new(FxBridgeLogicBSCTransactionBatchExecutedEvent)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCTransferOwnerEventIterator is returned from FilterTransferOwnerEvent and is used to iterate over the raw logs and unpacked data for TransferOwnerEvent events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCTransferOwnerEventIterator struct {
	Event *FxBridgeLogicBSCTransferOwnerEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCTransferOwnerEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCTransferOwnerEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCTransferOwnerEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCTransferOwnerEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCTransferOwnerEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCTransferOwnerEvent represents a TransferOwnerEvent event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCTransferOwnerEvent struct {
	Token    common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferOwnerEvent is a free log retrieval operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterTransferOwnerEvent(opts *bind.FilterOpts) (*FxBridgeLogicBSCTransferOwnerEventIterator, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCTransferOwnerEventIterator{contract: _FxBridgeLogicBSC.contract, event: "TransferOwnerEvent", logs: logs, sub: sub}, nil
}

// WatchTransferOwnerEvent is a free log subscription operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchTransferOwnerEvent(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCTransferOwnerEvent) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "TransferOwnerEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCTransferOwnerEvent)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferOwnerEvent is a log parse operation binding the contract event 0xb0f1bf050fff9d249d22389b0f2673295260c8deca341a2755d95318f9fbc699.
//
// Solidity: event TransferOwnerEvent(address _token, address _newOwner)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseTransferOwnerEvent(log types.Log) (*FxBridgeLogicBSCTransferOwnerEvent, error) {
	event := new(FxBridgeLogicBSCTransferOwnerEvent)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "TransferOwnerEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FxBridgeLogicBSCUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCUnpausedIterator struct {
	Event *FxBridgeLogicBSCUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FxBridgeLogicBSCUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FxBridgeLogicBSCUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FxBridgeLogicBSCUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FxBridgeLogicBSCUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FxBridgeLogicBSCUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FxBridgeLogicBSCUnpaused represents a Unpaused event raised by the FxBridgeLogicBSC contract.
type FxBridgeLogicBSCUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) FilterUnpaused(opts *bind.FilterOpts) (*FxBridgeLogicBSCUnpausedIterator, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &FxBridgeLogicBSCUnpausedIterator{contract: _FxBridgeLogicBSC.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *FxBridgeLogicBSCUnpaused) (event.Subscription, error) {

	logs, sub, err := _FxBridgeLogicBSC.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FxBridgeLogicBSCUnpaused)
				if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_FxBridgeLogicBSC *FxBridgeLogicBSCFilterer) ParseUnpaused(log types.Log) (*FxBridgeLogicBSCUnpaused, error) {
	event := new(FxBridgeLogicBSCUnpaused)
	if err := _FxBridgeLogicBSC.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
