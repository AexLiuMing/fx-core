// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethereum/erc20/v1/genesis.proto

package types

import (
	fmt "fmt"
	types2 "github.com/cosmos/cosmos-sdk/x/bank/types"
	types "github.com/functionx/fx-core/x/evm/types"
	types1 "github.com/functionx/fx-core/x/feemarket/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module's genesis state.
type GenesisState struct {
	// module parameters
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// registered token pairs
	TokenPairs []TokenPair `protobuf:"bytes,2,rep,name=token_pairs,json=tokenPairs,proto3" json:"token_pairs"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4550e2331649685, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetTokenPairs() []TokenPair {
	if m != nil {
		return m.TokenPairs
	}
	return nil
}

// Params defines the erc20 module params
type Params struct {
	// parameter to enable the intrarelaying of Cosmos coins <--> ERC20 tokens.
	EnableErc20 bool `protobuf:"varint,1,opt,name=enable_erc20,json=enableErc20,proto3" json:"enable_erc20,omitempty" yaml:"enable_erc20"`
	// parameter to enable the EVM hook to convert an ERC20 token to a Cosmos
	// Coin by transferring the Tokens through a MsgEthereumTx to the
	// ModuleAddress Ethereum address.
	EnableEVMHook bool `protobuf:"varint,2,opt,name=enable_evm_hook,json=enableEvmHook,proto3" json:"enable_evm_hook,omitempty" yaml:"enable_evm_hook"`
	// parameter to set ibc timeout
	IbcTimeout time.Duration `protobuf:"bytes,3,opt,name=ibc_timeout,json=ibcTimeout,proto3,stdduration" json:"ibc_timeout" yaml:"ibc_timeout"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4550e2331649685, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnableErc20() bool {
	if m != nil {
		return m.EnableErc20
	}
	return false
}

func (m *Params) GetEnableEVMHook() bool {
	if m != nil {
		return m.EnableEVMHook
	}
	return false
}

func (m *Params) GetIbcTimeout() time.Duration {
	if m != nil {
		return m.IbcTimeout
	}
	return 0
}

type InitEvmProposal struct {
	// the title of the update proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// evm module params
	EvmParams types.Params `protobuf:"bytes,3,opt,name=evmParams,proto3" json:"evmParams"`
	// feeMarket module params.
	FeemarketParams types1.Params `protobuf:"bytes,4,opt,name=feemarketParams,proto3" json:"feemarketParams"`
	// erc20 moduel params.
	Erc20Params Params `protobuf:"bytes,5,opt,name=erc20Params,proto3" json:"erc20Params"`
	// token pairs of Cosmos native denom and FIP20 token address
	Metadatas []types2.Metadata `protobuf:"bytes,6,rep,name=metadatas,proto3" json:"metadatas"`
}

func (m *InitEvmProposal) Reset()         { *m = InitEvmProposal{} }
func (m *InitEvmProposal) String() string { return proto.CompactTextString(m) }
func (*InitEvmProposal) ProtoMessage()    {}
func (*InitEvmProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4550e2331649685, []int{2}
}
func (m *InitEvmProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitEvmProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitEvmProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitEvmProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitEvmProposal.Merge(m, src)
}
func (m *InitEvmProposal) XXX_Size() int {
	return m.Size()
}
func (m *InitEvmProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_InitEvmProposal.DiscardUnknown(m)
}

var xxx_messageInfo_InitEvmProposal proto.InternalMessageInfo

func (m *InitEvmProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *InitEvmProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InitEvmProposal) GetEvmParams() types.Params {
	if m != nil {
		return m.EvmParams
	}
	return types.Params{}
}

func (m *InitEvmProposal) GetFeemarketParams() types1.Params {
	if m != nil {
		return m.FeemarketParams
	}
	return types1.Params{}
}

func (m *InitEvmProposal) GetErc20Params() Params {
	if m != nil {
		return m.Erc20Params
	}
	return Params{}
}

func (m *InitEvmProposal) GetMetadatas() []types2.Metadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "fx.ethereum.erc20.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "fx.ethereum.erc20.v1.Params")
	proto.RegisterType((*InitEvmProposal)(nil), "fx.ethereum.erc20.v1.InitEvmProposal")
}

func init() { proto.RegisterFile("ethereum/erc20/v1/genesis.proto", fileDescriptor_d4550e2331649685) }

var fileDescriptor_d4550e2331649685 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xbb, 0x6b, 0xdb, 0x40,
	0x18, 0xb7, 0xf2, 0x30, 0xf5, 0x29, 0x21, 0x70, 0x0d, 0xad, 0x63, 0x1a, 0xc9, 0x08, 0x0a, 0xa1,
	0xa5, 0xa7, 0xda, 0xdd, 0x3c, 0x14, 0x6a, 0xec, 0x3e, 0x86, 0x80, 0x51, 0x42, 0x87, 0x2c, 0xe6,
	0x24, 0x9f, 0x65, 0x61, 0x9f, 0x4e, 0x48, 0x27, 0xe1, 0xfc, 0x17, 0xa5, 0x53, 0xc7, 0xfe, 0x39,
	0x19, 0x33, 0x76, 0x72, 0x8b, 0xbd, 0x94, 0x8e, 0x86, 0xee, 0x45, 0x77, 0x27, 0x3f, 0x92, 0x0c,
	0xdd, 0xf4, 0xe9, 0xf7, 0xb8, 0xfb, 0xee, 0xf7, 0x7d, 0xc0, 0x24, 0x7c, 0x44, 0x62, 0x92, 0x52,
	0x9b, 0xc4, 0x5e, 0xf3, 0xb5, 0x9d, 0x35, 0x6c, 0x9f, 0x84, 0x24, 0x09, 0x12, 0x14, 0xc5, 0x8c,
	0x33, 0x78, 0x3c, 0x9c, 0xa2, 0x82, 0x83, 0x04, 0x07, 0x65, 0x8d, 0xda, 0xb1, 0xcf, 0x7c, 0x26,
	0x08, 0x76, 0xfe, 0x25, 0xb9, 0x35, 0xc3, 0x63, 0x09, 0x65, 0x89, 0xed, 0xe2, 0x70, 0x6c, 0x67,
	0x0d, 0x97, 0x70, 0xdc, 0x10, 0x45, 0x81, 0xfb, 0x8c, 0xf9, 0x13, 0x62, 0x8b, 0xca, 0x4d, 0x87,
	0xf6, 0x20, 0x8d, 0x31, 0x0f, 0x58, 0xa8, 0xf0, 0xd3, 0xfb, 0x97, 0x91, 0x27, 0x4a, 0xf8, 0xf9,
	0x0a, 0x1e, 0x12, 0x42, 0x71, 0x3c, 0x26, 0x3c, 0xa7, 0xac, 0x0a, 0x45, 0x3b, 0x59, 0xbb, 0x64,
	0x54, 0x78, 0x64, 0x54, 0x42, 0xd6, 0x57, 0x0d, 0x1c, 0x7c, 0x90, 0xed, 0x5d, 0x70, 0xcc, 0x09,
	0x6c, 0x81, 0x72, 0x84, 0x63, 0x4c, 0x93, 0xaa, 0x56, 0xd7, 0xce, 0xf4, 0xe6, 0x33, 0xf4, 0x50,
	0xbb, 0xa8, 0x27, 0x38, 0xed, 0xbd, 0x9b, 0x99, 0x59, 0x72, 0x94, 0x02, 0xbe, 0x07, 0x3a, 0x67,
	0x63, 0x12, 0xf6, 0x23, 0x1c, 0xc4, 0x49, 0x75, 0xa7, 0xbe, 0x7b, 0xa6, 0x37, 0xcd, 0x87, 0x0d,
	0x2e, 0x73, 0x62, 0x0f, 0x07, 0xb1, 0xf2, 0x00, 0xbc, 0xf8, 0x91, 0x58, 0x7f, 0x35, 0x50, 0x96,
	0x07, 0xc0, 0x16, 0x38, 0x20, 0x21, 0x76, 0x27, 0xa4, 0x2f, 0x94, 0xe2, 0x52, 0x8f, 0xda, 0x4f,
	0x97, 0x33, 0xf3, 0xf1, 0x35, 0xa6, 0x93, 0x96, 0xb5, 0x89, 0x5a, 0x8e, 0x2e, 0xcb, 0x6e, 0x5e,
	0xc1, 0x0b, 0x70, 0x54, 0xa0, 0x19, 0xed, 0x8f, 0x18, 0x1b, 0x57, 0x77, 0x84, 0xfc, 0xe5, 0x7c,
	0x66, 0x1e, 0x76, 0x25, 0xf3, 0xf3, 0xf9, 0x47, 0xc6, 0xc6, 0xcb, 0x99, 0xf9, 0x64, 0xdb, 0x4f,
	0x29, 0x2c, 0xe7, 0x50, 0x59, 0x66, 0x34, 0x27, 0xc2, 0x2b, 0xa0, 0x07, 0xae, 0xd7, 0xe7, 0x01,
	0x25, 0x2c, 0xe5, 0xd5, 0x5d, 0xf1, 0x48, 0x27, 0x48, 0xe6, 0x88, 0x8a, 0x1c, 0x51, 0x47, 0xe5,
	0xd8, 0x36, 0xf2, 0xee, 0x96, 0x33, 0x13, 0x4a, 0xfb, 0x0d, 0xad, 0xf5, 0xed, 0xa7, 0xa9, 0x39,
	0x20, 0x70, 0xbd, 0x4b, 0xf5, 0xe3, 0xcf, 0x0e, 0x38, 0xfa, 0x14, 0x06, 0xbc, 0x9b, 0xd1, 0x5e,
	0xcc, 0x22, 0x96, 0xe0, 0x09, 0x3c, 0x06, 0xfb, 0x3c, 0xe0, 0x13, 0x22, 0x3a, 0xaf, 0x38, 0xb2,
	0x80, 0x75, 0xa0, 0x0f, 0x48, 0xe2, 0xc5, 0x41, 0x94, 0x1f, 0x22, 0xda, 0xaa, 0x38, 0x9b, 0xbf,
	0xe0, 0x5b, 0x50, 0x21, 0x19, 0x95, 0xaf, 0xa8, 0x6e, 0x59, 0xdb, 0x4e, 0x22, 0xa3, 0xf7, 0x82,
	0x5c, 0x4b, 0x60, 0x0f, 0x1c, 0xad, 0xc6, 0x48, 0xb9, 0xec, 0x09, 0x97, 0xfa, 0x96, 0xcb, 0x7a,
	0xd4, 0xee, 0x7a, 0xdd, 0x95, 0xc3, 0x0e, 0xd0, 0x45, 0x4a, 0xca, 0x6d, 0xff, 0xbf, 0xc7, 0x6b,
	0x53, 0x06, 0xdf, 0x81, 0x0a, 0x25, 0x1c, 0x0f, 0x30, 0xc7, 0x49, 0xb5, 0x2c, 0x26, 0xec, 0x14,
	0xc9, 0x2d, 0x43, 0x62, 0xb1, 0xd4, 0x96, 0xa1, 0x73, 0xc5, 0x2a, 0x5a, 0x5b, 0xa9, 0x5a, 0x7b,
	0xbf, 0xbf, 0x9b, 0xa5, 0x76, 0xe7, 0x66, 0x6e, 0x68, 0xb7, 0x73, 0x43, 0xfb, 0x35, 0x37, 0xb4,
	0x2f, 0x0b, 0xa3, 0x74, 0xbb, 0x30, 0x4a, 0x3f, 0x16, 0x46, 0xe9, 0xea, 0x85, 0x1f, 0xf0, 0x51,
	0xea, 0x22, 0x8f, 0x51, 0x7b, 0x98, 0x86, 0x5e, 0xfe, 0x9e, 0x53, 0x7b, 0x38, 0x7d, 0xe5, 0xb1,
	0x98, 0xd8, 0x53, 0xb5, 0x8a, 0xfc, 0x3a, 0x22, 0x89, 0x5b, 0x16, 0x89, 0xbf, 0xf9, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x46, 0x7e, 0x4d, 0x09, 0x36, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenPairs) > 0 {
		for iNdEx := len(m.TokenPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.IbcTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.IbcTimeout):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGenesis(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.EnableEVMHook {
		i--
		if m.EnableEVMHook {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EnableErc20 {
		i--
		if m.EnableErc20 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InitEvmProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitEvmProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitEvmProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadatas) > 0 {
		for iNdEx := len(m.Metadatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.Erc20Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.FeemarketParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.EvmParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.TokenPairs) > 0 {
		for _, e := range m.TokenPairs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableErc20 {
		n += 2
	}
	if m.EnableEVMHook {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.IbcTimeout)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *InitEvmProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.EvmParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.FeemarketParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Erc20Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Metadatas) > 0 {
		for _, e := range m.Metadatas {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPairs = append(m.TokenPairs, TokenPair{})
			if err := m.TokenPairs[len(m.TokenPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableErc20", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableErc20 = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableEVMHook", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableEVMHook = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.IbcTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitEvmProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitEvmProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitEvmProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EvmParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeemarketParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeemarketParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Erc20Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadatas = append(m.Metadatas, types2.Metadata{})
			if err := m.Metadatas[len(m.Metadatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
