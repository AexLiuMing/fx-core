// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/v1/legacy_oracle.proto

package v010

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LegacyOracle struct {
	OracleAddress   string     `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	BridgerAddress  string     `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
	ExternalAddress string     `protobuf:"bytes,3,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
	DelegateAmount  types.Coin `protobuf:"bytes,4,opt,name=delegate_amount,json=delegateAmount,proto3" json:"delegate_amount"`
	// start oracle height
	StartHeight  int64 `protobuf:"varint,5,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	Jailed       bool  `protobuf:"varint,6,opt,name=jailed,proto3" json:"jailed,omitempty"`
	JailedHeight int64 `protobuf:"varint,7,opt,name=jailed_height,json=jailedHeight,proto3" json:"jailed_height,omitempty"`
}

func (m *LegacyOracle) Reset()         { *m = LegacyOracle{} }
func (m *LegacyOracle) String() string { return proto.CompactTextString(m) }
func (*LegacyOracle) ProtoMessage()    {}
func (*LegacyOracle) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef9d1fd4d792451, []int{0}
}
func (m *LegacyOracle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyOracle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyOracle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyOracle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyOracle.Merge(m, src)
}
func (m *LegacyOracle) XXX_Size() int {
	return m.Size()
}
func (m *LegacyOracle) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyOracle.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyOracle proto.InternalMessageInfo

func (m *LegacyOracle) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *LegacyOracle) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

func (m *LegacyOracle) GetExternalAddress() string {
	if m != nil {
		return m.ExternalAddress
	}
	return ""
}

func (m *LegacyOracle) GetDelegateAmount() types.Coin {
	if m != nil {
		return m.DelegateAmount
	}
	return types.Coin{}
}

func (m *LegacyOracle) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *LegacyOracle) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *LegacyOracle) GetJailedHeight() int64 {
	if m != nil {
		return m.JailedHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*LegacyOracle)(nil), "fx.gravity.crosschain.v1.LegacyOracle")
}

func init() { proto.RegisterFile("crosschain/v1/legacy_oracle.proto", fileDescriptor_aef9d1fd4d792451) }

var fileDescriptor_aef9d1fd4d792451 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0xc7, 0x6d, 0x19, 0xc0, 0x9d, 0xce, 0xa0, 0x08, 0xa1, 0xb4, 0x8b, 0x30, 0x05, 0x21,
	0x86, 0x05, 0xb6, 0x02, 0x27, 0x68, 0xd9, 0x14, 0x09, 0x09, 0x29, 0x4b, 0x36, 0x91, 0xe3, 0x38,
	0x8e, 0x51, 0xc6, 0xaf, 0xb2, 0x9d, 0x28, 0xb9, 0x05, 0x77, 0xe1, 0x12, 0x5d, 0x76, 0xc9, 0x0a,
	0xa1, 0x99, 0x8b, 0xa0, 0xb1, 0x93, 0xc2, 0xee, 0xe5, 0xcb, 0xf7, 0x4b, 0xef, 0xf7, 0xc3, 0x97,
	0xdc, 0x80, 0xb5, 0xbc, 0x66, 0x4a, 0xd3, 0x2e, 0xa5, 0x8d, 0x90, 0x8c, 0x0f, 0x39, 0x18, 0xc6,
	0x1b, 0x41, 0x6e, 0x0d, 0x38, 0x88, 0xe2, 0xaa, 0x27, 0xd2, 0xb0, 0x4e, 0xb9, 0x81, 0xfc, 0xb3,
	0x49, 0x97, 0x5e, 0x9c, 0x4b, 0x00, 0xd9, 0x08, 0xea, 0xbd, 0xa2, 0xad, 0x28, 0xd3, 0x43, 0x08,
	0x5d, 0x3c, 0x97, 0x20, 0xc1, 0x8f, 0xf4, 0x30, 0x8d, 0x34, 0xe1, 0x60, 0xb7, 0x60, 0x69, 0xc1,
	0xac, 0xa0, 0x5d, 0x5a, 0x08, 0xc7, 0x52, 0xca, 0x41, 0xe9, 0xf0, 0xff, 0xd5, 0xcf, 0x23, 0xbc,
	0xf8, 0xe2, 0x57, 0xf8, 0xea, 0x37, 0x88, 0xde, 0xe0, 0x65, 0xd8, 0x25, 0x67, 0x65, 0x69, 0x84,
	0xb5, 0x31, 0x5a, 0xa3, 0xcd, 0xd3, 0xec, 0x2c, 0xd0, 0xab, 0x00, 0xa3, 0xb7, 0x78, 0x55, 0x18,
	0x55, 0x4a, 0x61, 0x1e, 0xbc, 0x23, 0xef, 0x2d, 0x47, 0x3c, 0x89, 0xef, 0xf0, 0x33, 0xd1, 0x3b,
	0x61, 0x34, 0x6b, 0x1e, 0xcc, 0x63, 0x6f, 0xae, 0x26, 0x3e, 0xa9, 0x37, 0x78, 0x55, 0x8a, 0xc3,
	0x7b, 0x38, 0x91, 0xb3, 0x2d, 0xb4, 0xda, 0xc5, 0x27, 0x6b, 0xb4, 0x39, 0xfd, 0x70, 0x4e, 0x42,
	0x0b, 0x72, 0x68, 0x41, 0xc6, 0x16, 0xe4, 0x13, 0x28, 0x7d, 0x7d, 0x72, 0xf7, 0xfb, 0xe5, 0x2c,
	0x5b, 0x4e, 0xb9, 0x2b, 0x1f, 0x8b, 0x2e, 0xf1, 0xc2, 0x3a, 0x66, 0x5c, 0x5e, 0x0b, 0x25, 0x6b,
	0x17, 0x3f, 0x5a, 0xa3, 0xcd, 0x71, 0x76, 0xea, 0xd9, 0x8d, 0x47, 0xd1, 0x0b, 0x3c, 0xff, 0xce,
	0x54, 0x23, 0xca, 0x78, 0xbe, 0x46, 0x9b, 0x27, 0xd9, 0xf8, 0x15, 0xbd, 0xc6, 0x67, 0x61, 0x9a,
	0xb2, 0x8f, 0x7d, 0x76, 0x11, 0x60, 0x08, 0x5f, 0x7f, 0xbe, 0xdb, 0x25, 0xe8, 0x7e, 0x97, 0xa0,
	0x3f, 0xbb, 0x04, 0xfd, 0xd8, 0x27, 0xb3, 0xfb, 0x7d, 0x32, 0xfb, 0xb5, 0x4f, 0x66, 0xdf, 0xa8,
	0x54, 0xae, 0x6e, 0x0b, 0xc2, 0x61, 0x4b, 0xab, 0x56, 0x73, 0xa7, 0x40, 0xf7, 0xb4, 0xea, 0xdf,
	0x73, 0x30, 0x82, 0xf6, 0xf4, 0xbf, 0xe3, 0xbb, 0xe1, 0x56, 0xd8, 0x62, 0xee, 0xef, 0xf0, 0xf1,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0xf4, 0xe2, 0x89, 0x17, 0x02, 0x00, 0x00,
}

func (m *LegacyOracle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyOracle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyOracle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JailedHeight != 0 {
		i = encodeVarintLegacyOracle(dAtA, i, uint64(m.JailedHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.StartHeight != 0 {
		i = encodeVarintLegacyOracle(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.DelegateAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLegacyOracle(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ExternalAddress) > 0 {
		i -= len(m.ExternalAddress)
		copy(dAtA[i:], m.ExternalAddress)
		i = encodeVarintLegacyOracle(dAtA, i, uint64(len(m.ExternalAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintLegacyOracle(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintLegacyOracle(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacyOracle(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacyOracle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LegacyOracle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovLegacyOracle(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovLegacyOracle(uint64(l))
	}
	l = len(m.ExternalAddress)
	if l > 0 {
		n += 1 + l + sovLegacyOracle(uint64(l))
	}
	l = m.DelegateAmount.Size()
	n += 1 + l + sovLegacyOracle(uint64(l))
	if m.StartHeight != 0 {
		n += 1 + sovLegacyOracle(uint64(m.StartHeight))
	}
	if m.Jailed {
		n += 2
	}
	if m.JailedHeight != 0 {
		n += 1 + sovLegacyOracle(uint64(m.JailedHeight))
	}
	return n
}

func sovLegacyOracle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacyOracle(x uint64) (n int) {
	return sovLegacyOracle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LegacyOracle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacyOracle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyOracle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyOracle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegateAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedHeight", wireType)
			}
			m.JailedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacyOracle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacyOracle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacyOracle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacyOracle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacyOracle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacyOracle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacyOracle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacyOracle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacyOracle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacyOracle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacyOracle = fmt.Errorf("proto: unexpected end of group")
)
